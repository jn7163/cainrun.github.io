<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cain For iOS]]></title>
  <link href="http://Cain.developer.io/atom.xml" rel="self"/>
  <link href="http://Cain.developer.io/"/>
  <updated>2016-08-22T15:11:16+08:00</updated>
  <id>http://Cain.developer.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 单例模式》]]></title>
    <link href="http://Cain.developer.io/14718491333111.html"/>
    <updated>2016-08-22T14:58:53+08:00</updated>
    <id>http://Cain.developer.io/14718491333111.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>有一段时间没有发简书了, 刚好现在忙完项目的需求, 现在可以闲下来写写简书, 顺便自己给自己复习巩固一下知识, 不过我在这里又要吐槽一句, 项目中遇到了一个单例的问题, 让我感到非常的蛋疼, 写这个单例的人只是单纯了为了写单例而写单例, 没有想到会发生什么, 现在让我们一起来看看什么叫单例吧.</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>单例模式</code></strong> 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">目录</h3>

<ul>
<li><a href="#%E4%BD%9C%E8%80%85%E6%84%9F%E8%A8%80">作者感言</a></li>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">准备工作</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%BE%8B%E5%B7%A5%E7%A8%8B">添加单例工程</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B%E7%B1%BB">创建单例类</a></li>
<li><a href="#%E5%B7%A5%E7%A8%8B%E5%9C%B0%E5%9D%80">工程地址</a></li>
</ul>

<hr/>

<h3 id="toc_2">简介</h3>

<p><img src="media/14718491333111/SingletonUML.jpg" alt="SingletonUM"/></p>

<blockquote>
<p>这是一张单例的<strong><code>UML</code></strong>图, 非常简单明了的讲解单例类到底是怎么回事, 通常单例是用来作为管理中心, 或者是通知中心, 比如在<strong><code>iOS</code></strong>当中的<strong><code>NSNotificationCenter</code></strong>, <strong><code>[[UIApplication sharedApplication] statusBarStyle]</code></strong>, <strong><code>NSUserDefaults</code></strong>, <strong><code>[NSFileManager defaultManager]</code></strong>等等都是单例, 单例类有几个特征.</p>

<ul>
<li>系统当中只有一个实例</li>
<li>易于外界访问</li>
<li>防止子类继承</li>
<li>共享信息</li>
</ul>
</blockquote>

<hr/>

<h3 id="toc_3">准备工作</h3>

<blockquote>
<p>首先, 我们先来建一个<strong><code>WorkSpace</code></strong>, 这样子方便我们以后多添加工程, 因为单例模式只是我们的开始.</p>
</blockquote>

<p><img src="media/14718491333111/1.png" alt="1"/></p>

<hr/>

<h3 id="toc_4">添加单例工程</h3>

<blockquote>
<p>创建完<strong><code>WorkingSpace</code></strong>之后, 我们就来添加<strong><code>SingletonPattern(单例)</code></strong>的工程</p>
</blockquote>

<p><img src="media/14718491333111/2.png" alt="2"/></p>

<p><img src="media/14718491333111/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_5">创建单例类</h3>

<blockquote>
<p>现在我们来创建一个叫<strong><code>UserInfoManager</code></strong>单例类</p>
</blockquote>

<p><img src="media/14718491333111/4.png" alt="4"/></p>

<blockquote>
<p>声明一个类方法用于外界访问 </p>
</blockquote>

<p><img src="media/14718491333111/5.png" alt="5"/></p>

<blockquote>
<p>接下来我们去实现这个类方法就好了</p>
</blockquote>

<p><img src="media/14718491333111/6.png" alt="6"/></p>

<blockquote>
<p>看起来, 我们好像搞定了整个单例模式了, 下面让我们来试试效果.</p>
</blockquote>

<p><img src="media/14718491333111/7.png" alt="7"/></p>

<blockquote>
<p>打印出来的效果好像是只有一个, 但实际上并不是的, 我们再来看看</p>
</blockquote>

<p><img src="media/14718491333111/8.png" alt="8"/></p>

<blockquote>
<p>发现这个类还是可以初始化的, 并且是另外开辟了内存空间来存储的, 这就很尴尬了, 说好的只有一个实例呢??? </p>

<p>我在这里说一句, 施主莫怕, 等贫僧跳大, 继续回到单例类当中, 添加几个判断就好了</p>
</blockquote>

<p><img src="media/14718491333111/9.png" alt="9"/></p>

<blockquote>
<p>口说无凭, 我们来看看运行效果</p>
</blockquote>

<p><img src="media/14718491333111/10.png" alt="10"/></p>

<blockquote>
<p>这下子, 可以说明是只有一个实例了吧, 下面再来看看子类是否能继承</p>
</blockquote>

<p><img src="media/14718491333111/11.png" alt="11"/></p>

<p><img src="media/14718491333111/12.png" alt="12"/></p>

<hr/>

<blockquote>
<p>好了, 现在单例所需的</p>

<ul>
<li>易于外界访问</li>
<li>系统当中只有一个实例</li>
<li>防止子类继承</li>
</ul>

<p>我们都搞定, 酱紫我们就完成了一个单例类的创建啦</p>
</blockquote>

<hr/>

<h3 id="toc_6">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《CocoaPods》安装及使用教程]]></title>
    <link href="http://Cain.developer.io/14718487794778.html"/>
    <updated>2016-08-22T14:52:59+08:00</updated>
    <id>http://Cain.developer.io/14718487794778.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>CocoaPods</code></strong>的<strong><code>Review</code></strong>，让我知道了新版的<strong><code>CocoaPods</code></strong>和旧版的<strong><code>CocoaPods</code></strong>的区别, 在声明<strong><code>Podfile</code></strong>文件中, 需要加入对应的<strong><code>target</code></strong>才可以执行, 我个人感觉这个操作有些不太友好, 但他们要这么做, 我也没办法, 毕竟我只是小白用户而已.</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>CocoaPods</code></strong> 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">目录</h3>

<ul>
<li><a href="#%E4%BD%9C%E8%80%85%E6%84%9F%E8%A8%80">作者感言</a></li>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFCocoaPods">什么是CocoaPods</a></li>
<li><a href="#CocoaPods%E7%9A%84%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6">CocoaPods的核心组件</a></li>
<li><a href="#%E6%9B%B4%E6%8D%A2Ruby%E6%BA%90">更换Ruby源</a></li>
<li><a href="#%E5%AE%89%E8%A3%85CocoaPods">安装CocoaPods</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8CocoaPods">使用CocoaPods</a></li>
<li><a href="#%E5%8D%87%E7%BA%A7CocoaPods">升级CocoaPods</a></li>
</ul>

<hr/>

<h3 id="toc_2">介绍</h3>

<blockquote>
<p>在<strong><code>iOS</code></strong>项目中使用第三方类库可以说是非常常见的事，但是要正确地配置他们有时候是非常繁琐的事情，幸运的是<strong><code>CocoaPods</code></strong>是一个很好的解决方案。</p>
</blockquote>

<hr/>

<h3 id="toc_3">什么是CocoaPods</h3>

<blockquote>
<p><strong><code>CocoaPods</code></strong>是<strong><code>OS X</code></strong>和<strong><code>iOS</code></strong>下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为<strong><code>Pods</code></strong>的依赖库（这些类库必须是<strong><code>CocoaPods</code></strong>本身所支持的），并且可以轻松管理其版本。</p>

<p><strong><code>CocoaPods</code></strong>意义体现在两个方面。<br/>
* 第一，在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是<strong><code>ARC</code></strong>环境下的<strong><code>-fno-objc-arc</code></strong>配置等。</p>

<ul>
<li>第二，使用<strong><code>CocoaPods</code></strong>可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。</li>
</ul>

<p>接下来我们将介绍<strong><code>CocoaPods</code></strong>的使用。</p>
</blockquote>

<hr/>

<h3 id="toc_4">CocoaPods的核心组件</h3>

<blockquote>
<p><strong><code>CocoaPods</code></strong>是用<strong><code>Ruby</code></strong>写的，并划分成了若干个<strong><code>Gem</code></strong>包。</p>

<p><strong><code>CocoaPods</code></strong>在解析执行过程中最重要的几个包的路径分别是：<br/>
* <strong><code>CocoaPods/CocoaPods</code></strong><br/>
* <strong><code>CocoaPods/Core</code></strong><br/>
* <strong><code>CocoaPods/Xcodeproj</code></strong></p>

<p><strong><code>CocoaPods / CocoaPod</code></strong>：这是面向用户的组件，每当执行一个pod命令时，这个组件将被激活。它包括了所有实用<strong><code>CocoaPods</code></strong>的功能，并且还能调用其他<strong><code>gem</code></strong>包来执行任务。 </p>

<p><strong><code>CocoaPods / Core</code></strong>：<strong><code>Core gem</code></strong>提供了与<strong><code>CocoaPods</code></strong>相关的文件（主要是<strong><code>podfile</code></strong>和<strong><code>podspecs</code></strong>）的处理。 </p>

<p><strong><code>Podfile</code></strong>：该文件用于配置项目所需要的第三方库，它可以被高度定制。本文中我们主要在这里做动作。</p>

<p><strong><code>Podspec</code></strong>：该文件描述了一个库将怎样被添加进工程中，<strong><code>.podspec</code></strong>文件可以标识该第三方库所需要的源码文件、依赖库、编译选项，以及其他第三方库需要的配置。 </p>

<p><strong><code>CocoaPods / Xcodeproj</code></strong>：这个包负责处理工程文件，它能创建以及修改<strong><code>.xcodeproj</code></strong>文件和<strong><code>.xcworkspace</code></strong>文件。它也可以作为一个独立的包使用，当你要编写修改项目文件的脚本时，可以考虑使用<strong><code>CocoaPods/Xcodeproj</code></strong>。</p>
</blockquote>

<hr/>

<h3 id="toc_5">更换Ruby源</h3>

<blockquote>
<p>检查<strong><code>Ruby</code></strong>环境，一般来讲<strong><code>Mac OS</code></strong>都是自带<strong><code>Ruby</code></strong>环境的，在Terminal中输入命令即可查看<strong><code>Ruby</code></strong>的版本号</p>
</blockquote>

<pre><code class="language-vim">ruby -v
</code></pre>

<p><img src="media/14718487794778/0.png" alt="0"/></p>

<blockquote>
<p>切换<strong><code>Ruby</code></strong>源地址</p>
</blockquote>

<pre><code class="language-vim">gem sources --remove https://rubygems.org/
</code></pre>

<p><img src="media/14718487794778/1.png" alt="1"/></p>

<pre><code class="language-vim">#等有反应之后再敲入以下命令
gem sources -a https://ruby.taobao.org/
</code></pre>

<p><img src="media/14718487794778/2.png" alt="2"/></p>

<pre><code class="language-vim">#为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：
gem sources -l
</code></pre>

<p><img src="media/14718487794778/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_6">安装CocoaPods</h3>

<blockquote>
<p>现在我们在<strong><code>Terminal</code></strong>中输入以下命令, 输入机子的登录密码(没有密码的直接回车, 忘记密码的也别问我, 我也不知道怎么办), 等待自动完成安装就可以了</p>
</blockquote>

<pre><code class="language-vim">sudo gem install cocoapods
</code></pre>

<p><img src="media/14718487794778/4.png" alt="4"/></p>

<blockquote>
<p>安装完成之后就会有以下的提示</p>
</blockquote>

<p><img src="media/14718487794778/5.png" alt="5"/></p>

<blockquote>
<p>如果你不确定自己是否安装成功, 可以输入下面这个命令去查看</p>
</blockquote>

<pre><code class="language-vim">pod
</code></pre>

<p><img src="media/14718487794778/6.png" alt="6"/></p>

<blockquote>
<p>如果有以上的提示, 那就证明你是安装成功的, 如果安装不成功, 继续输入安装命令</p>
</blockquote>

<hr/>

<h3 id="toc_7">使用CocoaPods</h3>

<blockquote>
<p>创建<strong><code>Xcode</code></strong>项目(怎么创建<strong><code>Xcode</code></strong>项目这里我就不说了), 然后打开<strong><code>Terminal</code></strong>直接<strong><code>cd</code></strong>到工程的根目录中, 这里我使用一个<strong><code>Demo</code></strong></p>
</blockquote>

<p><img src="media/14718487794778/7.png" alt="7"/></p>

<blockquote>
<p>Xcode项目中创建Podfile文件, 且编辑</p>
</blockquote>

<p><img src="media/14718487794778/8.png" alt="8"/></p>

<p><img src="media/14718487794778/9.png" alt="9"/></p>

<blockquote>
<p>保存<strong><code>Podfile</code></strong>文件, 直接运行<strong><code>CocoaPods</code></strong>的命令, 如果该开源项目有其他项目的依赖, <strong><code>CocoaPods</code></strong>会自动下载对应的依赖项目.<br/>
PS: 里面的两端文字并不是自己写得, 是需要去<strong><code>GitHub</code></strong>里查看该项目最高支持<strong><code>iOS版本</code></strong>是多少, 以及该开源项目是第几个版本.</p>
</blockquote>

<p><img src="media/14718487794778/10.png" alt="10"/></p>

<blockquote>
<p>由于我们的<strong><code>CocoaPods</code></strong>是第一安装, 所以会提示<strong><code>Setting up CocoaPods master repo</code></strong>, 这个时候我们只要静静的等待它初始化完, 这个等待的时间会比较长, 耐心等待吧, 骚年们~~要是想知道<strong><code>CocoaPods</code></strong>初始化多少了, 我们可以进入到<strong><code>CocoaPods</code></strong>的目录, 然后输入</p>
</blockquote>

<pre><code class="language-vim">du -sh
</code></pre>

<p><img src="media/14718487794778/11.png" alt="11"/></p>

<blockquote>
<p><strong><font color=red>PS: 如果中途安装失败, 重复命令即可.</font></strong></p>
</blockquote>

<p><dr></p>

<blockquote>
<p>初始化结束之后, 我们就可以继续捣鼓了, 但是我们发现, 出错了, 去<a href="https://cocoapods.org"><strong>CocoaPods</strong></a>官网看了一下, 原来是少添加了一个指定的<strong><code>target</code></strong>, 这个<strong><code>target</code></strong>是在哪里获取呢? 下面看图~~</p>
</blockquote>

<p><img src="media/14718487794778/12.png" alt="12"/></p>

<p><img src="media/14718487794778/13.png" alt="13"/></p>

<blockquote>
<p>然后我们再次打开<strong><code>Podfile</code></strong>, 编辑它, 保存, 再次<strong><code>install</code></strong></p>
</blockquote>

<pre><code class="language-vim">target &#39;CollectionViewDemo&#39; do
   pod &#39;HTHorizontalSelectionList&#39;, &#39;~&gt; 0.7.0&#39;
end
</code></pre>

<p><img src="media/14718487794778/14.png" alt="14"/></p>

<p><img src="media/14718487794778/15.png" alt="15"/></p>

<blockquote>
<p>OK, 成功了, 我们会看到工程里多了一些文件, 而我们再也不会运行<strong><code>.xcodeproj</code></strong>工程文件, 而是运行<strong><code>.xcworkspace</code></strong></p>
</blockquote>

<p><img src="media/14718487794778/16.png" alt="16"/></p>

<p><img src="media/14718487794778/17.png" alt="17"/></p>

<blockquote>
<p>关于怎么去使用第三方的库这里我就不需要再去说了, 大家都懂的</p>
</blockquote>

<hr/>

<h3 id="toc_8">升级CocoaPods</h3>

<blockquote>
<p>先更新gem<br/><br/>
<code>vim<br/>
sudo gem update —system<br/>
</code><br/>
删除rubygems源<br/>
<code>vim<br/>
gem sources --remove https://rubygems.org/<br/>
</code><br/>
添加ruby淘宝源<br/>
<code>vim<br/>
gem sources -a https://ruby.taobao.org/<br/>
</code><br/>
测试源是否正确, 和刚开始安装时一样<br/>
<code>vim<br/>
gem sources -l<br/>
</code><br/>
安装CocoaPods<br/>
<code>vim<br/>
sudo gem install cocoa pods<br/>
pod setup<br/>
</code><br/>
查看CocoaPods版本<br/>
<code>vim<br/>
pod --version<br/>
</code></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：界面调试工具《Reveal》]]></title>
    <link href="http://Cain.developer.io/14718465693146.html"/>
    <updated>2016-08-22T14:16:09+08:00</updated>
    <id>http://Cain.developer.io/14718465693146.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>Reveal</code></strong>研究，让我发现调试UI再也不像会以前那么的困难, 更加不会那么的蛋疼, 不需要每次都在脑海里想象出那个画面, 自从使用了<strong><code>Reveal</code></strong>之后, 麻麻再也不用担心我调界面难过了~</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>Reveal</code></strong> 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">目录</h3>

<ul>
<li><a href="#%E4%BD%9C%E8%80%85%E6%84%9F%E8%A8%80">作者感言</a></li>
<li><a href="#%E7%96%91%E9%97%AE">疑问</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0Debug%E5%91%BD%E4%BB%A4">添加Debug命令</a></li>
<li><a href="#%E5%9C%A8Xcode%E4%B8%AD%E5%90%AF%E5%8A%A8Reveal">在Xcode中启动Reveal</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8BReveal%E6%95%88%E6%9E%9C">查看Reveal效果</a></li>
<li><a href="#%E7%89%B9%E6%AE%8A%E6%95%99%E7%A8%8B(%E6%97%A0%E9%99%90%E8%AF%95%E7%94%A8)">特殊教程(无限试用)</a></li>
<li><a href="#%E9%99%84%E4%BB%B6">附件</a></li>
</ul>

<hr/>

<h3 id="toc_2">疑问</h3>

<blockquote>
<p>有童鞋可能会问, <strong><code>Xcode</code></strong>不是自带了有<a href="https://developer.apple.com/library/ios/recipes/xcode_help-debugger/using_view_debugger/using_view_debugger.html">Debug View Hierarchy in Xcode</a>么, 为啥还要用第三方的Reveal, 答案就是:<q>因为苹果所提供的<strong><code>Debug View Hierarchy in Xcode</code></strong>弱爆了, 只能看看, 啥都不能操作, 而且还容易造成<strong><code>Xcode</code></strong>的卡顿, 比如一些电脑比较低配的, 卡死, 然后<strong><code>Xcode</code></strong>就一闪而过, 直接就<strong><code>Crash</code></strong>了.</q></p>

<p><a href="http://revealapp.com">Reveal</a>就不会出现这个问题, Reveal是一款图形调试工具, 支持iOS全设备的UI调试, 支持模拟器以及真机调试, 同时也支持实时UI效果的展示.</p>
</blockquote>

<hr/>

<h3 id="toc_3">添加Debug命令</h3>

<blockquote>
<p>打开<strong><code>Terminal</code></strong>, 输入命令</p>
</blockquote>

<pre><code class="language-vim">vim ~/.lldbinit 
</code></pre>

<p><img src="media/14718456835492/0.png" alt="0"/></p>

<blockquote>
<p>添加命令<br/>
<code>vim<br/>
command alias reveal_load_sim expr (void*)dlopen(&quot;/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib&quot;, 0x2);  <br/>
command alias reveal_load_dev expr (void*)dlopen([(NSString*)[(NSBundle*)[NSBundle mainBundle] pathForResource:@&quot;libReveal&quot; ofType:@&quot;dylib&quot;] cStringUsingEncoding:0x4], 0x2);  <br/>
command alias reveal_start expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@&quot;IBARevealRequestStart&quot; object:nil];  <br/>
command alias reveal_stop expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@&quot;IBARevealRequestStop&quot; object: nil nil]; <br/>
</code></p>
</blockquote>

<p><img src="media/14718456835492/1.png" alt="1"/></p>

<p>这里解释一下命令的意思</p>

<blockquote>
<p><strong><code>reveal_load_sim</code></strong> 为模拟器加载reveal调试用的动态链接库<br/>
<strong><code>reveal_load_dev</code></strong> 为真机加载<br/>
<strong><code>reveal_start</code></strong>       启动reveal调试功能<br/>
<strong><code>reveal_stop</code></strong>         结束reveal调试功能</p>
</blockquote>

<hr/>

<h3 id="toc_4">在Xcode中启动Reveal</h3>

<blockquote>
<p>首先打开<strong><code>Xcode</code></strong>的工程, 去到<strong><code>AppDelegate</code></strong></p>
</blockquote>

<p><img src="media/14718456835492/2.png" alt="2"/></p>

<blockquote>
<p>然后在<strong><code>application:didFinishLaunchingWithOptions</code></strong>方法中添加断点</p>
</blockquote>

<p><img src="media/14718456835492/3.png" alt="3"/></p>

<blockquote>
<p>编辑断点, 添加对应的代码<br/>
<img src="media/14718456835492/4.png" alt="4"/></p>
</blockquote>

<p><img src="media/14718456835492/5.png" alt="5"/></p>

<blockquote>
<p>运行工程, 如果看到控制台里输出以下酱紫的一行字, 就代表设置成功了</p>
</blockquote>

<p><img src="media/14718456835492/6.png" alt="6"/></p>

<hr/>

<h3 id="toc_5">查看Reveal效果</h3>

<blockquote>
<p>看完上面的操作步骤, 只要你设置的都是正确的, 那就可以打开<strong><code>Reveal</code></strong>查看效果了</p>
</blockquote>

<p><img src="media/14718456835492/7.png" alt="7"/></p>

<blockquote>
<p>如果你的模拟器切换了页面, <strong><code>Reveal</code></strong>是不会自动刷新的, 既然是酱紫, 那我们就需要做对应的操作</p>
</blockquote>

<p><img src="media/14718456835492/8.png" alt="8"/></p>

<p><img src="media/14718456835492/9.png" alt="9"/></p>

<p><img src="media/14718456835492/10.png" alt="10"/></p>

<hr/>

<h3 id="toc_6">特殊教程(无限试用)</h3>

<blockquote>
<p>打开你的<strong><code>Terminal</code></strong>, 然后输入以下命令</p>
</blockquote>

<p><img src="media/14718456835492/11.png" alt="11"/></p>

<blockquote>
<p>找到<strong><code>com.ittybittyapps.Reveal.plist</code></strong>文件删掉</p>

<p>PS: 这个文件每次运行的时候<strong><code>Reveal</code></strong>都会创建一次, 每次都是从第一天开始, 每次<strong><code>Reveal</code></strong>还有几天的时候, 再删掉, 就会再次从第一天开始.</p>
</blockquote>

<p><img src="media/14718456835492/12.png" alt="12"/></p>

<blockquote>
<p><strong><font color=red>这里声明一点, 作者是希望大家都去购买正版, 而不是去寻找什么破解方法, 毕竟我们本身就是做软件的, 所以希望大家可以去支持支持正版.</font></strong></p>
</blockquote>

<hr/>

<h3 id="toc_7">附件</h3>

<blockquote>
<p>由于真机调试是需要修改<strong><code>Xcode</code></strong>工程配置, 不太适合团队协作, 所以这里我只提供了模拟器UI调试的方法, 如果有朋友需要真机调试, 这里有一个<a href="http://support.revealapp.com/kb/getting-started/integrating-reveal-add-reveal-to-your-xcode-project">官方教程</a>, 有兴趣的童鞋可以自行去查看</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
