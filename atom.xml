<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cain For iOS]]></title>
  <link href="https://cainrun.github.io/atom.xml" rel="self"/>
  <link href="https://cainrun.github.io/"/>
  <updated>2016-09-25T13:05:11+08:00</updated>
  <id>https://cainrun.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：集成 Union Pay - 银联支付]]></title>
    <link href="https://cainrun.github.io/14740149724404.html"/>
    <updated>2016-09-16T16:36:12+08:00</updated>
    <id>https://cainrun.github.io/14740149724404.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>前面已经把<strong><code>WeChat SDK</code></strong>的支付, <strong><code>AliPay SDK</code></strong>搞得七七八八了, 接下来就是银联支付的<strong><code>Union Pay SDK</code></strong>.<br/>
<dr/><br/>
<strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>Union Pay SDK</code><strong>如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>银联嘛, 用过银行卡的人都懂的, 我们大天朝的产物, 主要是用来联合大天朝各个银行, 实现各个银行互通, 可跨行, 跨区, 跨境使用等等....其实换了一句话来说, 就是中国版的<strong><code>VISA</code></strong>, <strong><code>MasterCard</code></strong>, 虽然银联起步的比较晚, 但发展的脚步不比<strong><code>VISA</code></strong>, <strong><code>MasterCard</code></strong>要差.</p>
</blockquote>

<hr/>

<h3 id="toc_2">准备工作</h3>

<blockquote>
<p>在这里, 我不得不吐槽一下, 如果是第一次集成银联的童鞋, 估计一开始还真是够呛的, 或许你连<strong><code>SDK</code></strong>都找不到在哪里下载, 这网站还真的很难找, 所以我在这里贴出来给你们了, 方便各位童鞋们自行去查找下载<strong><a href="https://open.unionpay.com">商家技术服务</a></strong><br/>
<dr/><br/>
这里还有怎么去查找SDK的示例, 大家也看看呗</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/1.png" alt="1"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/2.png" alt="2"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/3.png" alt="3"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/4.png" alt="4"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/5.png" alt="5"/></p>

<blockquote>
<p>这里我下载下来的是3.3.3版本, 54.8MB大小, 或许之后银联会继续更新SDK包, 这个的话, 大家看着办吧~~</p>
</blockquote>

<hr/>

<h3 id="toc_3">废话来一段</h3>

<blockquote>
<p>惯例, 继续来一段废话, 打开我们之前的集成<strong><code>WeChat SDK</code></strong>和<strong><code>AliPay SDk</code></strong>的工程, 新建一个工程叫做<strong><code>UnionPay-Objective-C</code></strong>的新工程</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/6.png" alt="6"/></p>

<hr/>

<h3 id="toc_4">配置工程</h3>

<blockquote>
<p>配置工程的话, 首先我们要引入<strong><code>Union Pay SDK</code></strong>的依赖包, 一共五个, 这或许是第三方支付品台里需要导入最少依赖的.</p>

<ul>
<li>LocalAuthentication.framework</li>
<li>SystemConfiguration.framework</li>
<li>CoreGraphics.framework</li>
<li>CFNetwork.framework</li>
<li>libz.tbd</li>
</ul>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/7.png" alt="7"/></p>

<blockquote>
<p>然后呢, 我们需要去到<strong><code>Info.plist</code></strong>里, 添加三个属性</p>

<ul>
<li>App Transport Security Settings

<ul>
<li>Allow Arbitrary Loads</li>
</ul></li>
<li>Application requires iPhone environment</li>
<li>LSApplicationQueriesSchemes

<ul>
<li>uppaysdk</li>
<li>uppaywallet</li>
<li>uppayx1</li>
<li>uppayx2</li>
<li>uppayx3</li>
</ul></li>
</ul>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/8.png" alt="8"/></p>

<blockquote>
<p>接下来, 我们要去添加<strong><code>URL Schemes</code></strong>了, </p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/9.png" alt="9"/></p>

<blockquote>
<p>最后, 就是我们要把<strong><code>Union Pay SDK</code></strong>导进来了, 这样子就配置好整个工程了, 顺带说一声, 这个<strong><code>SDK</code></strong>在<strong><code>paymentcontrol</code></strong>这个目录下~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/10.png" alt="10"/></p>

<blockquote>
<p>差点别忘了把<strong><code>-ObjC</code></strong>这个宏加上, 不然没法跑</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/11.png" alt="11"/></p>

<hr/>

<h3 id="toc_5">布局UI界面</h3>

<blockquote>
<p>惯例, 这里我们也是只给一个<strong><code>UIButton</code></strong>以及一个<strong><code>Action</code></strong>事件.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/12.png" alt="12"/></p>

<hr/>

<h3 id="toc_6">补充多一个点</h3>

<blockquote>
<p>这里还需要补充一个点, 由于银联是采用<strong><code>C</code></strong>、<strong><code>C++</code></strong>以及<strong><code>Objective-C</code></strong>混编的, 所以这个有些蛋疼, 官方提供三种方式去适配, 我这里采用了最简单的一种, 直接把<strong><code>.m</code></strong>改成<strong><code>.mm</code></strong>.</p>
</blockquote>

<p><strong><font color=purple>第一种</font></strong></p>

<blockquote>
<ul>
<li><p>由于支付控件使用到了<strong><code>C</code></strong>、<strong><code>C++</code></strong>和<strong><code>Objective-C</code></strong>混编的情况，所以商户工程引入<strong><code>UPPaymentControl.h</code></strong>头文件以后可能会出现链接错误，这个时候可以通过以下三种方式解决：</p>

<ul>
<li><p>将涉及到引用<strong><code>UPPaymentControl.h</code></strong>的源文件的后缀名都改为<strong><code>.mm</code></strong>；</p></li>
<li><p>如果商户不想修改源文件的后缀名，可以在工程中添加一个空的继承自<strong><code>NSObject</code></strong>的类，并将文件.m后缀名该改为.mm即可方法为<strong><code>New File</code></strong> -&gt; <strong><code>Objective-C class</code></strong> -&gt; <strong><code>类名自取</code></strong> -&gt; <strong><code>保存</code></strong> -&gt; <strong><code>修改后缀名为.mm</code></strong>；</p></li>
<li><p>将工程的<strong><code>compile source as</code></strong>选项的值设置为<strong><code>Objective–C++</code></strong>；</p></li>
</ul></li>
</ul>
</blockquote>

<p><strong><font color=purple>第二种</font></strong></p>

<blockquote>
<ul>
<li>由于在Demo工程中添加了自定义的库文件<strong><code>libPaymentControl.a</code></strong>
，当编译Demo工程时，应该检查工程设置<strong><code>Search Paths</code></strong>里的<strong><code>Framework Search Paths</code></strong>、<strong><code>Header Search Paths</code></strong>、<strong><code>Library Search Paths</code></strong>的路径设置，看设置路径是否正确，另外还要注意里边是否多余一些不确定的路径。</li>
</ul>
</blockquote>

<p><strong><font color=purple>第三种</font></strong></p>

<blockquote>
<ul>
<li>将<strong><code>Xcode</code></strong>工程中<strong><code>Build Setting</code></strong> -&gt; <strong><code>Apple LLVM compiler Language</code></strong>标签下的<strong><code>C++ Language Dialect</code></strong>和<strong><code>C++ Standard Library</code></strong>属性值修改为<strong><code>Compiler Default</code></strong>如实在无法解决，尝试添加<strong><code>-ObjC</code></strong>宏的地方修改为<strong><code>-force_load</code></strong> + <strong><code>空格</code></strong> + <strong><code>控件路径</code></strong>，如：<strong><code>-force_load $(PROJECT_DIR)/ libPaymentControl.a</code></strong>，如果还报错，上下文应该会有<strong><code>libPaymentControl.a</code></strong>文件找不到异常，比如<strong><code>ld: file not found: /Users/apple/Desktop/Communication 2/ libPaymentControl.a
clang: error: linker command failed with exit code 1 (use -v to see invocation)</code></strong>
请确定<strong><code>libPaymentControl.a</code></strong>文件确实存在于此路径，可能为上下文路径配错。</li>
</ul>
</blockquote>

<hr/>

<h3 id="toc_7">实现银联支付</h3>

<blockquote>
<p>集成的时候, 这里我们需要分为两个步骤, 一个是网络, 一个是本地操作.</p>
</blockquote>

<p><strong><font color=purple>本地部分</font></strong></p>

<blockquote>
<p>所谓的本地部分, 指的就是弹框, 灭框的一些操作, 还有发起网络一些点击事件等等.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/13.png" alt="13"/></p>

<p><strong><font color=purple>网络部分</font></strong></p>

<blockquote>
<p>银联支付需要用到一个网络交互的流程, 这里的话, 我们直接引用<strong><code>Demo</code></strong>里的代码, 然后再加以修改一丢丢, 就可以了~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/14.png" alt="14"/></p>

<hr/>

<h3 id="toc_8">测试支付</h3>

<blockquote>
<p>在测试支付这点上, 微信和银联都做的挺不错的, 唯独支付宝这个连个测试账号都不提供, 真的是蛋疼...疼...疼, 打开银联接入指南, 里面就会有两个测试卡号.</p>
</blockquote>

<table>
<thead>
<tr>
<th>测试账号</th>
<th>测试信息</th>
</tr>
</thead>

<tbody>
<tr>
<td>姓名</td>
<td>张三</td>
</tr>
<tr>
<td>手机号码</td>
<td>18100000000</td>
</tr>
<tr>
<td>证件类型</td>
<td>01身份证</td>
</tr>
<tr>
<td>证件号</td>
<td>510265790128303</td>
</tr>
<tr>
<td>招商银行卡</td>
<td>6226090000000048</td>
</tr>
<tr>
<td>密码</td>
<td>111101</td>
</tr>
<tr>
<td>验证码</td>
<td>123456（<strong><font color=red>先点获取验证码之后再输入</font></strong>）</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th>测试账号</th>
<th>测试信息</th>
</tr>
</thead>

<tbody>
<tr>
<td>姓名</td>
<td>张三</td>
</tr>
<tr>
<td>手机号码</td>
<td>18100000000</td>
</tr>
<tr>
<td>证件类型</td>
<td>01身份证</td>
</tr>
<tr>
<td>CVN2</td>
<td>248</td>
</tr>
<tr>
<td>有效期</td>
<td>1219</td>
</tr>
<tr>
<td>证件号</td>
<td>510265790128303</td>
</tr>
<tr>
<td>华夏银行贷记卡</td>
<td>6226388000000095</td>
</tr>
<tr>
<td>密码</td>
<td>111101</td>
</tr>
<tr>
<td>验证码</td>
<td>123456（<strong><font color=red>先点获取验证码之后再输入</font></strong>）</td>
</tr>
</tbody>
</table>

<hr/>

<h3 id="toc_9">最终效果</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/UnionPay-Objective-C/images/15.png" alt="15"/></p>

<hr/>

<h3 id="toc_10">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/PayProject">https://github.com/CainRun/PayProject</a></p>

<hr/>

<h3 id="toc_11">最后</h3>

<p><center>码字很费脑, 看官赏点饭钱可好</center></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E5%BE%AE%E4%BF%A1QRC.jpg" alt="微信"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E6%94%AF%E4%BB%98%E5%AE%9DQRC.jpg" alt="支付宝"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：集成 AliPay - 支付宝]]></title>
    <link href="https://cainrun.github.io/14739456388212.html"/>
    <updated>2016-09-15T21:20:38+08:00</updated>
    <id>https://cainrun.github.io/14739456388212.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>前面我已经写了一篇关于<strong><code>WeChat SDK</code></strong>的支付篇, 那我们继续研究接下来的支付<strong><code>SDK</code></strong>, 这次就是国民支付软件<strong><code>支付宝</code></strong>, 下面就让我们来看看怎么集成<strong><code>AliPay SDK</code></strong>.<br/>
<dr/><br/>
<strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>AliPay SDK</code><strong>如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>支付宝SDK, 只要做过支付类App的, 都百分百接触过, 至于为什么那么多人喜欢用支付宝, 这个我就不在这里做解释了, 大家都懂的, 但是呢, 由于在阿里巴巴的发展下, 支付宝慢慢与蚂蚁金服整合, 甚至连开放平台名字都改成<strong><code>蚂蚁金服开放平台</code></strong>, 但无论怎么样, 支付宝都是行业内安全性最高的,</p>
</blockquote>

<hr/>

<h3 id="toc_2">准备工作</h3>

<blockquote>
<p>其实集成<strong><code>AliPay SDK</code></strong>和<strong><code>WeChat SDK</code></strong>有些类似, 就连<strong><code>商家ID</code></strong>的申请, <strong><code>App ID</code></strong>的申请, 流程都差不多, 详细这里我就不在这里讲解了, 大家可以去<strong><a href="https://b.alipay.com/">支付宝商家商户服务平台</a></strong>了解了解.</p>
</blockquote>

<hr/>

<h3 id="toc_3">下载SDK包</h3>

<blockquote>
<p>由于蚂蚁金服和支付宝的整合, 就连SDK的资源都改了, 大家可以去<strong><a href="https://doc.open.alipay.com/">开放平台-文档中心</a></strong>找到资源下载.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/1.png" alt="1"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/2.png" alt="2"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_4">继续来段废话</h3>

<blockquote>
<p>SDK包下载好了之后, 我们去到之前的那个支付工程建立我们的新工程, 命名为<strong><code>AliPay-Objective-C</code></strong>, 接下来我们就可以继续集成<strong><code>AliPay SDK</code></strong>了.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/4.png" alt="4"/></p>

<hr/>

<h3 id="toc_5">配置文件</h3>

<blockquote>
<p>现在我们建立好了工程, 然后我们和集成<strong><code>WeChat SDK</code></strong>一样, 需要配置一下工程, 这样子我们才能让<strong><code>AliPay SDK</code></strong>正常工作.<br/>
<dr/><br/>
现在让我们来打开工程的<strong><code>Info.plist</code></strong>文件, 添加一些配置.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/5.png" alt="5"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/6.png" alt="6"/></p>

<hr/>

<h3 id="toc_6">添加依赖包</h3>

<blockquote>
<p>和<strong><code>WeChat SDK</code></strong>一样, <strong><code>AliPay SDK</code></strong>一样是需要导入依赖包的, 但是这个依赖包要比<strong><code>WeChat SDK</code></strong>要多一些, 这个比较蛋疼.</p>

<ul>
<li><strong>UIKit.framework</strong></li>
<li><strong>CoreMotion.framework</strong></li>
<li><strong>CFNetWork.framework</strong></li>
<li><strong>Foundation.framework</strong></li>
<li><strong>CoreGraphics.framework</strong></li>
<li><strong>CoreText.framework</strong></li>
<li><strong>QuartzCore.framework</strong></li>
<li><strong>CoreTelephony.framework</strong></li>
<li><strong>SystemConfiguration.framework</strong></li>
<li><strong>libz.tbd</strong></li>
<li><strong>libc++.tbd</strong></li>
</ul>

<p><dr/><br/>
这些都是所需的依赖库, 真的是非常的蛋疼.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/7.png" alt="7"/></p>

<hr/>

<h3 id="toc_7">注册App ID</h3>

<blockquote>
<p>由于<strong><code>AliPay SDK</code></strong>是不需要在<strong><code>AppDelegate.m</code></strong>文件里注册的, 所以注册<strong><code>App ID</code></strong>这个步骤我们就忽略了.</p>
</blockquote>

<hr/>

<h3 id="toc_8">布局UI界面</h3>

<blockquote>
<p>这里的UI布局界面就和<strong><code>WeChat SDK</code></strong>那样, 直接拖一个<strong><code>UIButton</code></strong>, 以及加一个<strong><code>Action</code></strong>事件就好了.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/8.png" alt="8"/></p>

<hr/>

<h3 id="toc_9">注意!!!</h3>

<blockquote>
<p>由于<strong><code>AliPay</code></strong>改版了, 如果是老版本的SDK需要更新到最新的话, 一定要去好好的读一下接口文档, 因为这里需要添加多两个额外库以及一些依赖的签名文件, 这两个库在<strong><code>AliPay</code></strong>的资源包里可以找到.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/9.png" alt="9"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/10.png" alt="10"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/11.png" alt="11"/></p>

<blockquote>
<p>把这些依赖文件都拖入我们的工程里, 这样子我们就能正常的完成开发了~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/12.png" alt="12"/></p>

<hr/>

<h3 id="toc_10">集成SDK</h3>

<blockquote>
<p>之前的所有准备工作都已经做好了, 现在重点来了, 就让我们看看怎么实现支付宝支付!</p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>首先我们需要一个订单对象, 这里我们命名为<strong><code>AliPayOther</code></strong>, 还有一个<strong><code>AliPayBizContent</code></strong>, 然后声明一些属性, 并且在内部实现一些方法, 由于这里的代码比较多, 这里就不列举了, 各位童鞋们还是自行去翻翻工程吧~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/13.png" alt="13"/></p>

<blockquote>
<p>然后呢, 我们就要把两个重量级的文件拖入到工程, 一个就是<strong><code>AlipaySDK.bundle</code></strong>, 一个是<strong><code>AlipaySDK.framework</code></strong>, 这两个文件也是在<strong><code>AliPay</code></strong>的资源包里可以找到.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/14.png" alt="14"/></p>

<blockquote>
<p>导入之后编译一下, Xcode居然提示出错了!!!</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/15.png" alt="15"/></p>

<blockquote>
<p>看了一下错误信息, 提示<strong><code>NSObject</code></strong>, 我想应该是<strong><code>&lt;Foundation/Foundation.h&gt;</code></strong>没有导入到对应的文件里去吧, 试试看先</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/16.png" alt="16"/></p>

<blockquote>
<p>我屮艸芔茻, 一些问题解决了, 另一些问题又出来了, 仔细一看, 我勒个去, 原来是忘了导入刚刚所说的<strong><code>libcrypto.a</code></strong>以及<strong><code>libssl.a</code></strong>库了...我说怎么好像少了两个东西, 赶紧导入进去~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/17.png" alt="17"/></p>

<blockquote>
<p>导入完之后, 还有一个错误, 我也是醉醉哒....尼玛, 这是玩我呢....以前导入SDK那有那么麻烦啊...翻了一下文档, 发现要添加一个<strong><code>Header</code></strong>的链接....我也是醉了, 这个链接的写法是<strong><code>$(SRCROOT)/(工程名)</code></strong>, 我这里所写的是<strong><code>$(SRCROOT)/AliPay-Objective-C</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/18.png" alt="18"/></p>

<hr/>

<h3 id="toc_11">实现支付宝支付</h3>

<blockquote>
<p>好了, 我们把遇到的坑填完之后, 现在就来实现支付宝支付, 这里我们就直接把<strong><code>AliPayDemo</code></strong>里的代码直接拷贝过来, </p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/19.png" alt="19"/></p>

<blockquote>
<p>添加完之后, 别忘了处理<strong><code>AliPay</code></strong>回调回来的信息, 顺便说说, 这里的代理方法会有两个, 一个是<strong><code>iOS 9</code></strong>之后才有的新方法, 大家可以动动小脑袋, 看看怎么样封装才会比较好一些~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/20.png" alt="20"/></p>

<blockquote>
<p>到这里我们就已经集成完毕了, 由于支付宝的Demo里没有提供<strong><code>App ID</code></strong>和<strong><code>私钥</code></strong>, 所以我们这里显示的效果只能是酱紫了...需要测试的童鞋们只能自己去申请<strong><code>App ID</code></strong>和<strong><code>私钥</code></strong>了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/AliPay-Objective-C/images/21.png" alt="21"/></p>

<hr/>

<h3 id="toc_12">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/PayProject">https://github.com/CainRun/PayProject</a></p>

<hr/>

<h3 id="toc_13">最后</h3>

<p><center>码字很费脑, 看官赏点饭钱可好</center></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E5%BE%AE%E4%BF%A1QRC.jpg" alt="微信"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E6%94%AF%E4%BB%98%E5%AE%9DQRC.jpg" alt="支付宝"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：集成 WeChat SDK - 支付篇]]></title>
    <link href="https://cainrun.github.io/14735762460993.html"/>
    <updated>2016-09-11T14:44:06+08:00</updated>
    <id>https://cainrun.github.io/14735762460993.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>惯例, 开头都是要说些东西的了, 随着现在的App越来越商业化, 很多公司的App都会集成第三方的支付SDK, 这样子的成本就比较低, 但是呢, 有很多朋友还是不太会集成, 也不太爱看集成文档(我也是~), 想了想, 还是写一篇关于支付的文章吧, 现在写的是<strong><code>微信支付</code></strong>, 过段时间就把<strong><code>支付宝</code></strong>, <strong><code>银联</code></strong>, <strong><code>Apple Pay</code></strong>的也补上.</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>WeChat支付</code><strong>如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>微信SDK, 一个集成了社会化分享以及财付通支付功能的SDK, 需要商家先去微信开放平台先登记注册, 审批过后才能获得商家ID, 这样子才能使用支付功能, 下面让我们一起来看看吧.</p>
</blockquote>

<hr/>

<h3 id="toc_2">准备工作</h3>

<blockquote>
<p>首先, 我们要来做好准备工作: </p>

<ul>
<li>1.申请商家ID</li>
<li>2.申请App ID</li>
<li>3.下载, 集成SDK包</li>
<li>4.添加依赖包</li>
<li>5.最后, 调起支付<br/><br/></li>
</ul>

<p>做好以上的工作, 微信的SDK集成就告一段落了~</p>
</blockquote>

<hr/>

<h3 id="toc_3">申请商家ID</h3>

<blockquote>
<p>这里就不做详细介绍了, 毕竟我们这里讲的是如何集成SDK, 如果想了解的童鞋, 可以自行去<strong><a href="https://mp.weixin.qq.com/">微信公众平台</a></strong>自行查看哈~</p>
</blockquote>

<hr/>

<h3 id="toc_4">申请App ID</h3>

<blockquote>
<p>申请<strong><code>App ID</code></strong>这里也不做介绍, 这个步骤也很简单, 直接去<strong><a href="https://open.weixin.qq.com/">微信开放平台</a></strong>, 根据对应的指导信息, 一步一步的往下填写就OK了, 微信的<strong><code>App ID</code></strong>是需要审核时间的, 快的话几分钟, 慢的话, 慢慢等吧~~</p>
</blockquote>

<hr/>

<h3 id="toc_5">下载SDK包</h3>

<blockquote>
<p>下载SDK包, 这个更加的简单了, 直接去到<strong><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419319164&amp;token=&amp;lang=zh_CN">资源中心</a></strong>看到<strong><code>iOS开发工具包64位<br/>
</code></strong>就赶紧毫不犹豫的直接点下载, </p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/1.png" alt="1"/></p>

<blockquote>
<p>下载完成之后, 我们来看看SDK包里都有啥</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/2.png" alt="2"/></p>

<blockquote>
<p>我看了看2.0版本的Demo, 里面居然是没有微信支付的相关代码, 这相当蛋疼, 如果是第一次集成的童鞋们, 那就要哭了...不过好在我们用庞大的互联网搜索引擎, 谷歌, 百度, 这些问题都是可以解决的, </p>
</blockquote>

<hr/>

<h3 id="toc_6">再废话一段</h3>

<blockquote>
<p>废话讲了那么多, 现在让我们来看看怎么集成DSK包, 我们先创建一个<strong><code>WorkSpace</code></strong>文件, 叫<strong><code>PayProject</code></strong>, 然后再创建我们的第一个工程<strong><code>WeChatPay-Objective-C</code></strong>, 由于之前有人和我反应过, 为啥没有<strong><code>Swift</code></strong>版本的, 其实不是我想写<strong><code>Swift</code></strong>版本, 是它的语法到现在居然都还没有定型, 每个版本改一丢丢, 这比较蛋疼, 现在有人反应, 那我今后也把<strong><code>Swift</code></strong>版本给补上吧, 如果以后语法继续有更改, 那大家就根据自己的编程经验以及<strong><code>Xcode</code></strong>的提示自行修改哈~~</p>
</blockquote>

<hr/>

<h3 id="toc_7">配置工程</h3>

<blockquote>
<p>打开我们创建好的<strong><code>WeChatPay-Objective-C</code></strong>工程, 把<strong><code>SDK</code></strong>包拖进去, 这里的文件夹我改名字了, 你们也可以根据你们自己的喜好来改</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/3.png" alt="3"/></p>

<blockquote>
<p>添加完<strong><code>SDK</code></strong>包之后, 我们还要操作某些东西, 因为在<strong><code>iOS 9</code></strong>之后, 苹果限制了正常的<strong><code>HTTP</code></strong>请求, 如果我们要继续用, 就得先配置一下~~在微信的<strong><code>SDK</code></strong>文件夹里也有声明</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/4.png" alt="4"/></p>

<blockquote>
<p>打开工程, 找到工程的<strong><code>Info.plist</code></strong>文件, 直接添加就好了, 有时候Xcode不会提示, 需要我们手动填入, 这个就比较蛋疼了, 我这里就列举出来吧</p>

<ul>
<li>Application requires iPhone environment</li>
<li>LSApplicationQueriesSchemes</li>
<li>App Transport Security Settings

<ul>
<li>Allow Arbitrary Loads</li>
</ul></li>
</ul>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/5.png" alt="5"/></p>

<blockquote>
<p>添加完这些之后, 还是不够的, 我们需要去添加一个<strong><code>URL Schemes</code></strong>, 这里我先提供一个<strong><code>App ID</code></strong>, 是从以前的微信官方Demo里拷贝下来的~~<strong><code>wxb4ba3c02aa476ea1</code></strong>, 童鞋们自动复制粘贴哈, 这个时候, 我们就要打开工程配置了, 然后添加微信的<strong><code>URL Schemes</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/6.png" alt="6"/></p>

<blockquote>
<p>到这一步, 基本上这个阶段已经告已段落了, 继续下一个阶段~~~</p>
</blockquote>

<hr/>

<h3 id="toc_8">添加依赖包</h3>

<blockquote>
<p>使用第三方<strong><code>SDK</code></strong>最蛋疼的一件事就是需要添加很多的依赖包, 因为第三方需要做数据的收集, 或者其他操作之类的, 这样子你才能在他们的后台列表了查询到你的App流量, 微信的依赖包有好几个, </p>

<ul>
<li>UIKit.framework</li>
<li>Foundation.framework</li>
<li>SystemConfiguration.framework</li>
<li>CoreTelephony.framework</li>
<li>Security.framework</li>
<li>libz.tbd</li>
<li>libc++.tbd</li>
<li>libsqlite3.tbd<br/><br/></li>
</ul>

<p>现在我们就来添加这些依赖包吧, 怎么添加应该不用我说了吧0.0</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/7.png" alt="7"/></p>

<hr/>

<h3 id="toc_9">注册AppID</h3>

<blockquote>
<p>前期工作我们都做完了, 现在我们就用代码来实现微信支付~, 首先我们肯定要先注册一下微信<strong><code>App ID</code></strong>, 不然别说支付了, 就连分享神马之类的功能你都没法用, 打开<strong><code>AppDelegate.m</code></strong>, 导入<strong><code>WXApi.h</code></strong>文件, 注册<strong><code>App ID</code></strong>, 这个<strong><code>App ID</code></strong>, 就是我刚刚提供的那个<strong><code>wxb4ba3c02aa476ea1</code></strong>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/8.png" alt="8"/></p>

<hr/>

<h3 id="toc_10">布局UI</h3>

<blockquote>
<p>要调起微信支付, 我们肯定要有一个点击事件, 这里的<strong><code>UI</code></strong>, 我们就只给个<strong><code>UIButton</code></strong>和一个<strong><code>Action</code></strong>事件就好了.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/9.png" alt="9"/></p>

<hr/>

<h3 id="toc_11">调起微信支付</h3>

<blockquote>
<p>重头戏来了, 前面做了那么多的工作, 写了那么多的废话, 只为了现在真正的调起微信支付进行支付~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/10.png" alt="10"/></p>

<blockquote>
<p>实现代码都给你们贴出来了~这是我在以前的官方Demo中拷贝出来的~ <br/>
<br/></p>

<p><strong><font color=red>PS: 这里是Demo, 所以这里拿到的神马签名啊, 商户ID, 支付链接神马的, 都是写在客户端的, 但在实际开发当中, 这是强烈不建议在客户端内自己生成, 一定一定要由服务器返回, 不然你会非常深刻的了解到蛋疼这个词语是啥意思~~</font></strong></p>
</blockquote>

<pre><code class="language-objectivec">    NSString *urlString = @&quot;http://wxpay.weixin.qq.com/pub_v2/app/app_pay.php?plat=ios&quot;;
    
    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:urlString]];
    
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    
    [NSURLConnection sendAsynchronousRequest:request
                                       queue:queue
                           completionHandler:^(NSURLResponse * _Nullable response, NSData * _Nullable data, NSError * _Nullable connectionError) {
                               
                               if (data != nil) {
                                   
                                   NSError *error;
                                   NSMutableDictionary *dictionart = NULL;
                                   
                                   dictionart = [NSJSONSerialization JSONObjectWithData:data
                                                                          options:NSJSONReadingMutableLeaves
                                                                            error:&amp;error];
                                   
                                   NSLog(@&quot;URL: %@&quot;, urlString);
                                   
                                   if (dictionart != nil) {
                                       
                                       NSMutableString *retCode = [dictionart objectForKey:@&quot;retcode&quot;];
                                       
                                       if (retCode.integerValue == 0) {
                                           
                                           NSMutableString *stamp = [dictionart objectForKey:@&quot;timestamp&quot;];
                                           
                                           // 调起微信支付
                                           PayReq *req   = [[PayReq alloc] init];
                                           req.partnerId = [dictionart objectForKey:@&quot;partnerid&quot;];
                                           req.prepayId  = [dictionart objectForKey:@&quot;prepayid&quot;];
                                           req.nonceStr  = [dictionart objectForKey:@&quot;noncestr&quot;];
                                           req.timeStamp = stamp.intValue;
                                           req.package   = [dictionart objectForKey:@&quot;package&quot;];
                                           req.sign      = [dictionart objectForKey:@&quot;sign&quot;];
                                           
                                           [WXApi sendReq:req];
                                           
                                           // 日志输出
                                           NSLog(@&quot;appid = %@&quot;, [dictionart objectForKey:@&quot;appid&quot;]);
                                           NSLog(@&quot;partnerId = %@&quot;, req.partnerId);
                                           NSLog(@&quot;prepayId = %@&quot;, req.prepayId);
                                           NSLog(@&quot;nonceStr = %@&quot;, req.nonceStr);
                                           NSLog(@&quot;timeStamp = %d&quot;, req.timeStamp);
                                           NSLog(@&quot;package = %@&quot;, req.package);
                                           NSLog(@&quot;sign = %@&quot;, req.sign);
                                           
                                       } else {
                                           
                                           NSLog(@&quot;retmsg: %@&quot;, [dictionart objectForKey:@&quot;retmsg&quot;]);
                                       }
                                   } else {
                                       
                                       NSLog(@&quot;服务器返回错误, 未获取到JSON对象&quot;);
                                   }
                               } else {
                                   
                                   NSLog(@&quot;服务器返回错误&quot;);
                               }
                           }];
</code></pre>

<hr/>

<h3 id="toc_12">处理回调结果</h3>

<blockquote>
<p>实现代码我们都搞定了, 现在我们差的就是要处理微信回调回来的结果, 无论你支付成功或者是支付失败, 还是微信服务器爆炸了, 这个结果我们都要获取到, 还有对应的<strong><code>errCode</code></strong>.<br><br/>
打开<strong><code>AppDelegate.m</code></strong>, 我们要添加微信的代理协议, 实现一个微信的代理方法, 以及<strong><code>AppDelegate</code></strong>的两个方法</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/11.png" alt="11"/></p>

<blockquote>
<p>具体实现的代码</p>
</blockquote>

<pre><code class="language-Objectivec">- (void)onResp:(BaseResp *)resp {
    
    if ([resp isKindOfClass:[PayResp class]]) {
        
        NSString *stringMessage = @&quot;支付结果&quot;;
        NSString *stringTitle  = @&quot;支付结果&quot;;
        
        switch (resp.errCode) {
            case WXSuccess:
                
                stringMessage = @&quot;支付结果: 成功!&quot;;
                
                NSLog(@&quot;支付成功 - PaySuccess, retCode = %d&quot;, resp.errCode);
                
                break;
            default:
                
                stringMessage = [NSString stringWithFormat:@&quot;支付结果: 失败!, retcode = %d, retstr = %@&quot;, resp.errCode, resp.errStr];
                
                break;
        }
        
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:stringTitle
                                                            message:stringMessage
                                                           delegate:nil
                                                  cancelButtonTitle:@&quot;好的&quot;
                                                  otherButtonTitles:nil, nil];
        
        [alertView show];
    }
}

- (BOOL)application:(UIApplication *)application
      handleOpenURL:(NSURL *)url {
    
    return [WXApi handleOpenURL:url delegate:self];
}

- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation {
    
    return [WXApi handleOpenURL:url delegate:self];
}
</code></pre>

<hr/>

<h3 id="toc_13">最终效果</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/12.gif" alt="12"/></p>

<hr/>

<h3 id="toc_14">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/PayProject">https://github.com/CainRun/PayProject</a></p>

<hr/>

<h3 id="toc_15">最后</h3>

<p><center>码字很费脑, 看官赏点饭钱可好</center></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E5%BE%AE%E4%BF%A1QRC.jpg" alt="微信"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E6%94%AF%E4%BB%98%E5%AE%9DQRC.jpg" alt="支付宝"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：iOS 8 新特性《UIVisualEffect》]]></title>
    <link href="https://cainrun.github.io/14730058185822.html"/>
    <updated>2016-09-05T00:16:58+08:00</updated>
    <id>https://cainrun.github.io/14730058185822.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>在iOS 8发布的时候, <strong><code>Apple</code></strong>介绍了很多<strong><code>iOS 8</code></strong>的新特性, 比如什么<strong><code>Extensions</code></strong>,<strong><code>Photo</code></strong>,<strong><code>Siri</code></strong>等等之类的, 虽然讲了不少, 但也有很多东西被忽略掉的, 比如今天我们所讲的<strong><code>UIVisualEffect</code></strong>.<br/>
<dr/><br/>
有人会问, 这个类是干嘛的呢? 有人又会说, 这个类我用过, 但不好用等等之类的<br/>
<dr/><br/>
的确, 这个类的确是不太好用, 限制性太强了, 能使用的<strong><code>API</code></strong>也就一丢丢, 对于现在的需求逐渐多元化来说, 是远远不够的, 但我们可以期待一下, 或许以后苹果会逐渐的开放这个控件呢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p><strong><code>UIVisualEffect</code></strong>这个控件其实就是一个高斯模糊的一个实现的类, 它继承与<strong><code>NSObject</code></strong>, 有三种样式, 分别是: </p>

<ul>
<li><strong><code>UIBlurEffectStyleExtraLight</code></strong></li>
<li><strong><code>UIBlurEffectStyleLight</code></strong></li>
<li><strong><code>UIBlurEffectStyleDark</code></strong></li>
</ul>

<p><dr/><br/>
有一个子类叫做<strong><code>UIVibrancyEffect</code></strong>, 还有一个可调用<strong><code>UIVisualEffect</code></strong>的类叫做<strong><code>UIVisualEffectView</code></strong>, 下面让我们来看看怎么去使用吧.</p>
</blockquote>

<hr/>

<h3 id="toc_2">新建工程</h3>

<blockquote>
<p>这里我们建了一个叫做<strong><code>UIVisualEffect</code></strong>的工程</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/New-Features-For-iOS-8/master/03.UIVisualEffect/images/0.png" alt="0"/></p>

<hr/>

<h3 id="toc_3">布局UI界面</h3>

<blockquote>
<p>建完一个工程之后, 我们来布局一下UI, 由于这个类有三种样式, 所以我们这里就建立三个<strong><code>UIButton</code></strong>, 并且新建三个<strong><code>ViewController</code></strong>, 这样子我们就能比较清晰的看到三种不同的效果了.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/New-Features-For-iOS-8/master/03.UIVisualEffect/images/1.png" alt="1"/></p>

<blockquote>
<p>这个是和<strong><code>Storyboard</code></strong>绑定好的页面, 这样子, 我们就可以根据点击自己想要的按钮就跳转到对应的页面去了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/New-Features-For-iOS-8/master/03.UIVisualEffect/images/2.png" alt="2"/></p>

<blockquote>
<p>在实现之前, 我偷偷的丢了一张图片在工程里面, 也对UI进行了一个布局, 并且关联了其中一个图片的属性, 这里大家凑合着看吧, 毕竟丑~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/New-Features-For-iOS-8/master/03.UIVisualEffect/images/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_4">实现对应的效果</h3>

<blockquote>
<p>这里我只拿<strong><code>ExtraLight</code></strong>效果来做演示, 其他的两种效果大家可以自行去翻查一下<strong><code>Demo</code></strong>代码, 代码都是比较简单的~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/New-Features-For-iOS-8/master/03.UIVisualEffect/images/4.png" alt="4"/></p>

<blockquote>
<p>这样子就完成了, 下面是具体实现的代码:</p>
</blockquote>

<pre><code class="language-Objectivec">    self.title = NSStringFromClass(self.class);
    
    UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleDark];
    
    UIVisualEffectView *visualEffectView = [[UIVisualEffectView alloc] initWithEffect:blurEffect];
    
    visualEffectView.alpha = 0.5;
    
    visualEffectView.frame = self.imageView.bounds;
    
    [self.imageView addSubview:visualEffectView];
</code></pre>

<hr/>

<h3 id="toc_5">最终效果</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/New-Features-For-iOS-8/master/03.UIVisualEffect/images/5.gif" alt="5"/></p>

<hr/>

<h3 id="toc_6">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/New-Features-For-iOS-8">https://github.com/CainRun/New-Features-For-iOS-8</a></p>

<h3 id="toc_7">最后</h3>

<p><center>码字很费脑, 看官赏点饭钱可好</center></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E5%BE%AE%E4%BF%A1QRC.jpg" alt="微信"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/PayProject/master/WeChatPay-Objective-C/Images/%E6%94%AF%E4%BB%98%E5%AE%9DQRC.jpg" alt="支付宝"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：横向滑动条《CALToolBarListView》]]></title>
    <link href="https://cainrun.github.io/14729678790305.html"/>
    <updated>2016-09-04T13:44:39+08:00</updated>
    <id>https://cainrun.github.io/14729678790305.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>关于横向滑动条, 我一直都想自己封装一个, 但由于精力有限, 目前只能封装个比较简陋的, 如果有朋友想帮忙完善一下的话, 可以私聊我, 我给你开通一下权限哈~~</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>CALToolBarListView</code><strong>如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p><strong><code>CALToolBarListView</code></strong>是一个仿<strong><code>UISegmentedControl</code></strong>的一个<strong><code>UI控件</code></strong>, 在刚开始设计的时候, 注重点就是为了灵活性, 可以自定义标题颜色, 选中提示条的颜色等等, 目前只有两个样式, 当然, 你可以根据我提供的源码来自行添加你所喜欢的样式</p>
</blockquote>

<hr/>

<h2 id="toc_2"><p align="center">使用说明</p></h2>

<h3 id="toc_3">初始化</h3>

<blockquote>
<p>在使用<strong><code>CALToolBarListView</code></strong>的时候必须得通过以下的初始化方法来进行初始化, 并且<strong><code>titleArray</code></strong>不能为空, 否则就会<strong><code>Crash</code></strong>.</p>
</blockquote>

<pre><code class="language-objectivec">/**
 *  初始化TooBar
 *
 *  @param frame      设置TooBar的Frame
 *
 *  @return self
 */
- (instancetype)initToolBarWithFrame:(CGRect)frame;
</code></pre>

<hr/>

<h3 id="toc_4">通用属性</h3>

<pre><code class="language-objectivec">/**
 *  是否根据按钮宽度自动缩小标题, default: NO
 */
@property (nonatomic, assign) BOOL titleAdjustsFontSizeToFitWidth;

/**
 *  选中的按钮文字的颜色, default: redColor
 */
@property (nonatomic, strong) UIColor *selectedColor;

/**
 *  非选中的按钮文字的颜色, default: blackColor
 */
@property (nonatomic, strong) UIColor *deselectColor;

/**
 *  背景颜色, default: whiteColor
 */
@property (nonatomic, strong) UIColor *barBakcgroundColor;

/**
 *  底部线条的颜色, default: grayColor
 */
@property (nonatomic, strong) UIColor *bottomLineColor;

/**
 *  选中按钮提示条的颜色, default: cyanColor
 */
@property (nonatomic, strong) UIColor *selectedLineColor;

/**
 *  按钮文字大小, default: 16
 */
@property (nonatomic, assign) NSInteger textFont;

/**
 *  按钮之间的间距, default: 10
 */
@property (nonatomic, assign) CGFloat buttonSpacing;

/**
 *  是否需要底部线
 */
@property (nonatomic, assign) BOOL isNeedLine;

/**
 *  是否需要选中提示条
 */
@property (nonatomic, assign) BOOL isNeedSelectedLine;

/**
 *  当前点击的currentIndex, default: 0
 */
@property (nonatomic, getter=currentIndex) NSInteger currentIndex;
</code></pre>

<hr/>

<h3 id="toc_5">显示样式</h3>

<blockquote>
<p>在这里我提供了两个显示的样式</p>
</blockquote>

<pre><code class="language-objectivec">typedef NS_ENUM(NSInteger, CALToolBarStyle) {
    CALToolBarNormalStyle = 0,
    CALToolBarSeparationStyle
};
</code></pre>

<blockquote>
<p>可以通过下面这个属性进行设置, 默认是<strong><code>CALToolBarNormalStyle</code></strong></p>
</blockquote>

<pre><code class="language-objectivec">/**
 *  设置ToolBar显示的样式, default: CALToolBarNormalStyle
 */
@property (nonatomic, assign) CALToolBarStyle toolBarStyle;
</code></pre>

<blockquote>
<p><strong><code>CALToolBarNormalStyle</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CALToolBarView/master/images-File/CALToolBarNormalStyle.png" alt="1"/></p>

<blockquote>
<p><strong><code>CALToolBarSeparationStyle</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CALToolBarView/master/images-File/CALToolBarSeparationStyle.png" alt="2"/></p>

<blockquote>
<p>选择样式二的时候, 可通过以下的属性修改显示的颜色</p>
</blockquote>

<pre><code class="language-objectivec">/**
 *  Seoaration分割线的颜色
 *  注意: 前提是你设置了toolBarStyle为CALToolBarSeparationStyle才有效, 默认为grayColor
 */
@property (nonatomic, strong) UIColor *separationColor;
</code></pre>

<hr/>

<h3 id="toc_6">通用方法</h3>

<blockquote>
<p>首先肯定是最常用的方法<strong><code>reloadData</code></strong>, 是用来刷新整个<strong><code>CALToolBarListView</code></strong>数据的方法, 只有调用了这个方法, <strong><code>CALToolBarListView</code></strong>才会显示对应的数据.<br/>
<code>objectivec<br/>
/**<br/>
 *  刷新整个列表<br/>
 */<br/>
- (void)reloadData;<br/>
</code></p>

<p>以下这个方法是默认选中指定<strong><code>Index</code></strong>的按钮, 但需要注意一点就是, 必须现有数据才能调用, 否则直接调用时无效的.<br/>
<code>objectivec<br/>
/**<br/>
 *  指定当前选中的Button Index<br/>
 *  @param 注意: 使用该方法, 必须先得实现reloadData的方法, 否则不生效<br/>
 *  @param index 指定当前选中的Button Index<br/>
 */<br/>
- (void)didSelectedButton:(NSInteger)index;<br/>
</code></p>

<p>以下这个方法是获取对应按钮的点击事件, 在这里我就没有使用代理来写, 毕竟写代理会增加更多的代码, 直接用一个<strong><code>Block</code></strong>就完事<br/>
<code>objectivec<br/>
/**<br/>
 *  点击事件Block<br/>
 */<br/>
@property (nonatomic, copy) void(^calToolBarSelectedBlock)(NSInteger index);<br/>
</code></p>
</blockquote>

<hr/>

<h3 id="toc_7">演示代码</h3>

<blockquote>
<p>以下就是使用的演示代码, 方便大家直接查看代码</p>
</blockquote>

<pre><code class="language-objectivec">    NSArray *titleArray = @[@&quot;标题一&quot;, @&quot;标题二&quot;, @&quot;标题三&quot;, @&quot;标题四&quot;, @&quot;标题五&quot;];

    CALToolBarListView *toolBarList = [[CALToolBarListView alloc] initToolBarWithFrame:CGRectMake(0, 250, self.view.frame.size.width, 40)
                                                                            titleArray:titleArray];
    toolBarList.barBakcgroundColor = [UIColor greenColor];
    toolBarList.selectedLineColor  = [UIColor redColor];
    toolBarList.bottomLineColor    = [UIColor blueColor];
    toolBarList.toolBarStyle       = CALToolBarSeparationStyle;
    toolBarList.separationColor    = [UIColor grayColor];
    
    [toolBarList reloadData];
    [toolBarList didSelectedButton:3];
    
    NSLog(@&quot;currentIndex: %zd&quot;, toolBarList.currentIndex);
    
    [toolBarList setCalToolBarSelectedBlock:^(NSInteger index) {
        NSLog(@&quot;index: %zd&quot;, index);
    }];
    
    [self.view addSubview:toolBarList];
</code></pre>

<hr/>

<h3 id="toc_8">展示效果</h3>

<blockquote>
<p>请原谅我用的渣渣<strong><code>GIF</code></strong>录制工具....</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CALToolBarView/master/images-File/demo.gif" alt="demo"/></p>

<hr/>

<h3 id="toc_9">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/CALToolBarView">https://github.com/CainRun/CALToolBarView</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：使用自定义《UIActivity》进行内容分享]]></title>
    <link href="https://cainrun.github.io/14729665774054.html"/>
    <updated>2016-09-04T13:22:57+08:00</updated>
    <id>https://cainrun.github.io/14729665774054.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>在我写这篇文章的时候, 虽然国内有一堆文章介绍<strong><code>UIActivityViewController</code></strong>和<strong><code>UIActivity</code></strong>, 但都是零零散散的, 哪怕我翻墙出去看<strong><code>YouTube</code></strong>, 或者是著名的<strong><a href="http://nshipster.com/uiactivityviewcontroller/">黑胡子博客</a></strong>, 都没有详细的讲解怎么去自定义所需的<strong><code>UIActivity</code></strong>, 最后基本上翻遍了谷歌, 才找到了所需的.</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>UIActivityViewController</code><strong>如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>这段时间有很多朋友都问我关于怎么去集成<strong><code>ShareSDK</code></strong>或者<strong><code>友盟社会化分享SDK</code></strong>的问题, 其实我想说, <strong><code>Apple</code></strong>一开始就提供了一个类, 供我们去使用分享了, 在<strong><code>iOS 6</code></strong>之后更加增强了这个类, 使我们不再需要集成第三方的, 而且还支持自定义分享的<strong><code>item</code></strong>.</p>
</blockquote>

<hr/>

<h3 id="toc_2">创建新工程</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/1.png" alt="1 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/2.png" alt="2 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_3">创建一个继承与UIActivityViewController的类</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/3.png" alt="3 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/4.png" alt="4 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_4">创建一个继承与UIActivity的类</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/5.png" alt="5 | center | 1080x0"/></p>

<blockquote>
<p>这时候我们就要来给这个自定义的<strong><code>UIActivity</code></strong>类写上我们需要的内容, 首先我们可以去到系统提供的<strong><code>UIActivity</code></strong>头文件看<strong><code>API</code></strong>, 获取我们所需的<strong><code>API</code></strong>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/6.png" alt="6  | center | 1080x0"/></p>

<hr/>

<h3 id="toc_5">配置UIActivity和UIActivityViewController</h3>

<blockquote>
<p>下面是我写好的自定义<strong><code>WeiboActivity</code></strong> <strong><code>API</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/7.png" alt="7  | center | 1080x0"/></p>

<blockquote>
<p>具体实现的代码:</p>
</blockquote>

<pre><code class="language-Objective-c">#import &quot;WeiboActivity.h&quot;

@implementation WeiboActivity

- (NSString *)activityType {
    
    return @&quot;CustomWeiboActivity&quot;;
}

- (NSString *)activityTitle {
    
    return @&quot;新浪微博&quot;;
}

- (UIImage *)activityImage {
    
    return [UIImage imageNamed:@&quot;ShareBundle.bundle/share_icon_1&quot;];
}

- (void)performActivity {
    [self activityDidFinish:YES];
}

@end
</code></pre>

<blockquote>
<p>下面是我写好的自定义<strong><code>UIActivityController</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/8.png" alt="8  | center | 1080x0"/></p>

<blockquote>
<p>具体实现的代码:</p>
</blockquote>

<pre><code class="language-Objective-c">#import &quot;UIActivityController.h&quot;
#import &quot;WeiboActivity.h&quot;

#define CAL_GET_OBJECT(objc) if (objc) return objc

@interface UIActivityController ()

@property (nonatomic, strong) WeiboActivity *weiboActivity;

@end

@implementation UIActivityController

- (instancetype)initAspActivityControllerWithContent:(NSArray *)activityContent {
    
    NSArray *activitys = @[self.weiboActivity];
    
    if (self = [super initWithActivityItems:activityContent applicationActivities:activitys]) {
        
        self.excludedActivityTypes = @[UIActivityTypePostToFacebook,
                                       UIActivityTypePostToTwitter,
                                       UIActivityTypePostToWeibo,
                                       UIActivityTypeMail,
                                       UIActivityTypePrint,
                                       UIActivityTypeCopyToPasteboard,
                                       UIActivityTypeAssignToContact,
                                       UIActivityTypeSaveToCameraRoll,
                                       UIActivityTypeAddToReadingList,
                                       UIActivityTypePostToFlickr,
                                       UIActivityTypePostToVimeo,
                                       UIActivityTypePostToTencentWeibo,
                                       UIActivityTypeAirDrop,
                                       UIActivityTypeOpenInIBooks];
    }
    
    return self;
}

- (WeiboActivity *)weiboActivity {
    
    CAL_GET_OBJECT(_weiboActivity);
    
    _weiboActivity = [[WeiboActivity alloc] init];
    
    return _weiboActivity;
}

@end
</code></pre>

<blockquote>
<p>这里和大家说说<strong><code>excludedActivityTypes</code></strong>这个属性, 这个属性其实是一个数组属性, 代表的是, 如果我们不需要系统的服务就可以给它赋值, 这样子<strong><code>UIActivityViewController</code></strong>就不会显示对应的服务, 我这里默认全部干掉, 一个服务都不需要, 当然如果需要干掉我们自定义的<strong><code>UIActivity</code></strong>, 也可以在这里写上.</p>

<p>还有一点, 就是我们给<strong><code>UIActivityViewController</code></strong>赋值自定义的<strong><code>UIActivity</code></strong></p>

<p>PS: 注意一点, 这个赋值只能在<strong><code>initWithActivityItems: applicationActivities:</code></strong>这个方法的<strong><code>applicationActivities:</code></strong>赋值, 而且只能在初始化的时候赋值, 一旦赋值之后就不能再修改了.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/9.png" alt="9  | center | 1080x0"/></p>

<hr/>

<h3 id="toc_6">调起UIActivityViewController</h3>

<blockquote>
<p>最重要的地方来了, 就是调起我们自定义的<strong><code>UIActivityController</code></strong>.</p>

<p>首先我们要在<strong><code>Main.storyboard</code></strong>中拖一个<strong><code>UIButton</code></strong>, 然后添加对应的代码.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/10.png" alt="10  | center | 1080x0"/></p>

<blockquote>
<p>代码: </p>
</blockquote>

<pre><code class="language-Objective-c">#import &quot;ViewController.h&quot;
#import &quot;UIActivityController.h&quot;

@interface ViewController ()

@property (nonatomic, strong) UIActivityController *activityController;

@end

@implementation ViewController

- (IBAction)popActivityController:(UIButton *)sender {
    
    [self presentViewController:self.activityController animated:YES completion:nil];
}

- (UIActivityController *)activityController {
    
    NSString *shareTitle = @&quot;分享的标题&quot;;
    UIImage *shareImage = [UIImage imageNamed:@&quot;ShareBundle.bundle/share_icon_1&quot;];
    
    if (!_activityController) {
        
        _activityController = [[UIActivityController alloc] initAspActivityControllerWithContent:@[shareTitle, shareImage]];
    }
    
    return _activityController;
}

@end
</code></pre>

<blockquote>
<p>最后我们运行一下看看效果</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/11.png" alt="10  | center | 720x0"/></p>

<blockquote>
<p>发现什么都没有, 肯定在喷我, 觉得我是在耍你们, 哈哈, 其实在这里我们少了一个方法没有添加, 回到我们自定义的<strong><code>WeiboActivity</code></strong>中, 添加上就OK了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/12.png" alt="12  | center | 1080x0"/></p>

<blockquote>
<p>具体实现的代码:</p>
</blockquote>

<pre><code class="language-Objective-c">- (BOOL)canPerformWithActivityItems:(NSArray *)activityItems {
    
    if (activityItems.count &gt; 0) {
        
        return YES;
    }
    
    return NO;
}
</code></pre>

<blockquote>
<p>再来运行看看效果</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/13.png" alt="13  | center | 720x0"/></p>

<blockquote>
<p>好了, <strong><code>item</code></strong>出来了, 但好像有什么不对, 图标呢???!!! 为啥是灰色的? 楼主你耍我, 我要去爆你菊花!!!!!</p>

<p>别紧张, 在系统默认的<strong><code>UIActivityViewController</code></strong>中, 下面这部分是属于系统服务, 默认只会显示一个轮廓, 并不会显示整张图片, 下面我们把自定义的<strong><code>WeiboActivity</code></strong>显示图片的方法改改就好了.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/14.png" alt="14  | center | 1080x0"/></p>

<blockquote>
<p>代码:</p>
</blockquote>

<pre><code class="language-Objective-c">- (UIImage *)_activityImage {
    
    return [UIImage imageNamed:@&quot;ShareBundle.bundle/share_icon_1&quot;];
}
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/15.png" alt="15  | center | 720x0"/></p>

<blockquote>
<p>好了, 我的菊花保住了, 图标出来了, 把我吓了一身冷汗</p>

<p>图标出来了, 我们就要给这个<strong><code>item</code></strong>添加点击事件了, 做什么好呢, 总不可能让我去导个微信微博等SDK进来演示, 毕竟还要去申请<strong><code>AppID</code></strong>和<strong><code>AppKey</code></strong>呢, 我们来个弹框吧~~~</p>

<p>我一般喜欢写个<strong><code>Block</code></strong>把点击事件抛出去做处理, 这次我也不例外~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/16.png" alt="16  | center | 1080x0"/></p>

<blockquote>
<p>具体实现的代码:</p>
</blockquote>

<pre><code class="language-Objective-c">- (void)performActivity {
    [self activityDidFinish:YES];
    
    if (self.weiboBlock) {
        self.weiboBlock();
    }
}
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/17.png" alt="17  | center | 1080x0"/></p>

<blockquote>
<p>具体实现的代码: </p>
</blockquote>

<pre><code class="language-Objective-c">- (WeiboActivity *)weiboActivity {
    
    CAL_GET_OBJECT(_weiboActivity);
    
    _weiboActivity = [[WeiboActivity alloc] init];
    
    [_weiboActivity setWeiboBlock:^{
        
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;新浪微博&quot;
                                                            message:@&quot;分享至新浪微博&quot;
                                                           delegate:nil
                                                  cancelButtonTitle:@&quot;好的&quot;
                                                  otherButtonTitles:nil, nil];
        
        [alertView show];
    }];

    return _weiboActivity;
}
</code></pre>

<blockquote>
<p>PS: 由于我这里是做示范, 所以使用<strong><code>UIAlertView</code></strong>, 如果大家要在项目中使用的话, 尽量使用<strong><code>UIAlertController</code></strong>.</p>
</blockquote>

<hr/>

<h3 id="toc_7">最终效果</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/ActivityControllerDemo/master/Image-file/18.png" alt="15  | center | 720x0"/></p>

<hr/>

<h3 id="toc_8">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/ActivityControllerDemo/tree/master/UIActivityViewControllerDemo">https://github.com/CainRun/ActivityControllerDemo/tree/master/UIActivityViewControllerDemo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：非脚本版本《模拟器与真机静态Framework合成教程》]]></title>
    <link href="https://cainrun.github.io/14729651532234.html"/>
    <updated>2016-09-04T12:59:13+08:00</updated>
    <id>https://cainrun.github.io/14729651532234.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>为了写这篇文章, 我翻查了许多资料, 都没有找到详细点的可参考资料, 外国的文章就不用说了, 光是看鸡肠就头晕了, 所以我自己总结了一些经验, 整理了一番, 决定分享出来, 希望大家喜欢</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>Framework</code><strong>如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>在我们做<strong><code>iOS开发中</code></strong>, 有时候我们会自己动手写一些库, 方便自己去调用, 但是我们又不想这个库的内部实现代码被别人知道, 这个时候我们就需要把这个库打包成<strong><code>Framework</code></strong>或者是<strong><code>lib.a</code></strong>文件, 这里我们只做<strong><code>Framework</code></strong>的打包教程, <strong><code>lib.a</code></strong>的打包方式和<strong><code>Framework</code></strong>趋同差异, 如果有需要, 后面我再补上.</p>
</blockquote>

<hr/>

<h3 id="toc_2">创建静态包工程</h3>

<blockquote>
<p>在开始合成之前, 我们肯定是需要创建一个生成<strong><code>Framework</code></strong>的工程, 这里推荐用<strong><code>WorkSpace</code></strong>来创建, 因为可以方便我们去测试<strong><code>Framework</code></strong>库.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/1.png" alt="1 | center | 1080x0"/></p>

<blockquote>
<p>添加新的工程</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/2.png" alt="2 | center | 1080x0"/></p>

<blockquote>
<p>选择创建<strong><code>Cocoa Touch Framework</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/3.png" alt="3 | center | 1080x0"/></p>

<blockquote>
<p>给<strong><code>Framework</code></strong>命名, 喜欢啥名字, 自己看着办呗, 我个人的习惯就是, 这个是什么库, 我就命名是啥, 如果是用在某个工程的话, 我就会以该工程的名字来命名</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/4.png" alt="4 | center | 1080x0"/></p>

<blockquote>
<p>创建完之后, 我们会看到<strong><code>Framework</code></strong>里有一个头文件, 头文件里有一堆不明所以的代码, 这个时候我们不需要管, 直接干掉它</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/5.png" alt="5 | center | 1080x0"/></p>

<blockquote>
<p>这样子, 我们就创建<strong><code>Framework</code></strong>完毕了, 下面让我们来创建一个测试类.</p>
</blockquote>

<hr/>

<h3 id="toc_3">添加测试类</h3>

<blockquote>
<p>给这个测试类, 添加一个类方法</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/6.png" alt="6 | cneter | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/7.png" alt="7 | cneter | 1080x0"/></p>

<blockquote>
<p>添加完测试类之后, 下面让我们来配置一下整个<strong><code>Framework</code></strong>工程, 让它同时支持模拟器和真机.</p>
</blockquote>

<hr/>

<h3 id="toc_4">配置静态包工程</h3>

<blockquote>
<p>Xcode默认是会把Framework变成Debug模式, 这时候我们需要去改成Release模式</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/8.png" alt="8 | cneter | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/9.png" alt="9 | cneter | 1080x0"/></p>

<blockquote>
<p>然后我们去配置项目工程, 首先我们来添加一个模拟器的支持</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/10.png" alt="10 | cneter | 1080x0"/></p>

<blockquote>
<p>修改Framework最低支持iOS的版本, 我这里最低支持的是iOS7</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/11.png" alt="11 | cneter | 1080x0"/></p>

<blockquote>
<p>把默认的动态库, 切换成静态库</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/12.png" alt="12 | cneter | 1080x0"/></p>

<blockquote>
<p>配置需要暴露的<strong><code>.h</code></strong>文件</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/13.png" alt="13 | cneter | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/14.png" alt="14 | cneter | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/15.png" alt="15 | cneter | 1080x0"/></p>

<blockquote>
<p>最后, 我们在<strong><code>Test.h</code></strong>中导入<strong><code>TestClass.h</code></strong>, 当然, 我们也不需要这么做, 因为我们已经在配置中暴露了<strong><code>TestClass.h</code></strong>文件, 所以不需要引用也是可以的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/16.png" alt="16 | cneter | 1080x0"/></p>

<blockquote>
<p>这个时候, 我们先来测试一下能不能生成<strong><code>Framework</code></strong>库</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/17.png" alt="17 | cneter | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/18.png" alt="18 | cneter | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/19.png" alt="19 | cneter | 1080x0"/></p>

<blockquote>
<p>最终测试, 是成功生成<strong><code>Framework</code></strong>库的, 但这个是模拟器库, 如果你需要支持真机的话, 那么只要切换运行的选项就好了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/20.png" alt="20 | center | 1080x0"/></p>

<blockquote>
<p>这时候我们再去查看文件夹, 就会有两个<strong><code>Framework</code></strong>文件夹了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/21.png" alt="21 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_5">检测静态包</h3>

<blockquote>
<p>虽然我们把<strong><code>Framework</code></strong>都打包好了, 但是我们需要检测一下是否符合我们的需求, 这是我们要打开<strong><code>Terminal</code></strong>, 并且输入命令.</p>
</blockquote>

<pre><code>lipo -info (Framework二进制文件地址)
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/22.png" alt="22 | center | 1080x0"/></p>

<blockquote>
<p>检测真机Framework包</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/23.png" alt="23 | center | 1080x0"/></p>

<blockquote>
<p>检测模拟器Framework包</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/24.png" alt="24 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_6">合成真机与模拟器通用的静态包</h3>

<blockquote>
<p>前面做了那么多的事情, 就为了现在这一步, 就是将模拟器与真机两个Framework包合成一个通用的Framework包, 由于我这里没有通用的Shell脚本, 只能用最笨的办法合成两个包了, 下面让我们一起来看看.</p>

<p>打开终端输入合成命令<br/>
<code><br/>
lipo -create (真机Framework路径) (模拟器Framework路径) -output (真机/模拟器路径)<br/>
</code></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/25.png" alt="25 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/26.png" alt="26 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/27.png" alt="27 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/28.png" alt="28 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/29.png" alt="29 | center | 1080x0"/></p>

<blockquote>
<p>检测合成后的通用Framework, 只有看到<strong><code>armv7 arm64 i386 x86_64</code></strong>这四个同时存在, 才真正的合成成功</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/30.png" alt="30 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/31.png" alt="31 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_7">注意!!!!!</h3>

<blockquote>
<p>这里有一个注意事项, 有时候用<strong><code>lipo</code></strong>合成会报一个错误(我这里没有发现)</p>
</blockquote>

<pre><code>crun: error: active developer path (“/Applications/Xcode 2.app/Contents/Developer”) does not exist, use xcode-select --switch path/to/Xcode.app to specify the Xcode that you wish to use for command line developer tools (or see man xcode-select)
</code></pre>

<blockquote>
<p>这时候不要慌, 只要再输入下面的命令, 输入电脑密码后, 然后再次运行合成<strong><code>Framework</code></strong>的命令, 就可以合成了</p>
</blockquote>

<pre><code>sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
</code></pre>

<hr/>

<h3 id="toc_8">测试静态包</h3>

<blockquote>
<p>既然我们那么辛苦的合成了一个通用的<strong><code>Framework</code></strong>, 不用用, 怎么对得起我们的付出呢? 再次回到<strong><code>Workspace</code></strong>, 新建一个测试工程.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/32.png" alt="32 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/33.png" alt="33 | center | 1080x0"/></p>

<blockquote>
<p>注意, 创建测试工程的时候, 不要新建到<strong><code>Framework</code></strong>的工程内</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/34.png" alt="34 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/35.png" alt="35 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/36.png" alt="36 | center | 1080x0"/></p>

<blockquote>
<p>模拟器测试</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/37.png" alt="37 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/38.png" alt="38 | center | 1080x0"/></p>

<blockquote>
<p>真机测试</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/39.png" alt="39 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/NotAggregateFramework/images/40.png" alt="40 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_9">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/CreateGeneralFramework">https://github.com/CainRun/CreateGeneralFramework</a></p>

<hr/>

<h3 id="toc_10">结束语</h3>

<blockquote>
<p>好啦, 教程到这里就结束了, 谢谢大家的耐心观看</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：Aggregate脚本版本《模拟器与真机静态Framework合成教程》]]></title>
    <link href="https://cainrun.github.io/14729646870605.html"/>
    <updated>2016-09-04T12:51:27+08:00</updated>
    <id>https://cainrun.github.io/14729646870605.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>为了写这篇文章, 我翻查了许多资料, 都没有找到详细点的可参考资料, 外国的文章就不用说了, 光是看鸡肠就头晕了, 所以我自己总结了一些经验, 整理了一番, 决定分享出来, 希望大家喜欢</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>Aggregate-Framework</code><strong>如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>之前我写了一个关于非<strong><code>Aggregate</code></strong>版本的<a href="https://cainrun.github.io/14729651532234.html">模拟器与真机静态Framework合成教程</a>, 但那个实在是太麻烦的, 所以我又出墙翻了一些歪果仁写的博客, 果然是世上无难事只怕有心人, 终于被我找到合适的<strong><code>Shell</code></strong>脚本了</p>
</blockquote>

<hr/>

<h3 id="toc_2">创建静态包工程</h3>

<blockquote>
<p>新建一个Workpace文件</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/0.png" alt="0 | center | 1080x0"/></p>

<blockquote>
<p>新建Cocoa Touch Framework工程</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/1.png" alt="1 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/2.png" alt="2 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/3.png" alt="3 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/4.png" alt="4 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_3">添加测试类</h3>

<blockquote>
<p>添加一个测试类<strong><code>TestTwoClass</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/5.png" alt="5 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_4">配置静态包工程</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/6.png" alt="6 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/7.png" alt="7 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/8.png" alt="8 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/9.png" alt="9 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/10.png" alt="10 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/11.png" alt="11 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/12.png" alt="12 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_5">分别生成真机与模拟器的静态包</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/13.png" alt="13 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/14.png" alt="14 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_6">创建脚本选项</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/15.png" alt="15 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/16.png" alt="16 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/17.png" alt="17 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_7">配置脚本选项</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/18.png" alt="18 | center | 1080x0"/></p>

<blockquote>
<p>打开<strong><code>Run Script</code></strong>之后, 输入以下的脚本, 就可以自动合成通用的<strong><code>Framework</code></strong>库了</p>

<p>PS: 脚本是我在<strong><code>Google</code></strong>上搜到的, 详细是谁写的, 我也不清楚, 很感谢这个作者提供的脚本</p>
</blockquote>

<pre><code class="language-shell">if [ &quot;${ACTION}&quot; = &quot;build&quot; ]
then
INSTALL_DIR=${SRCROOT}/Products/${PROJECT_NAME}.framework

DEVICE_DIR=${BUILD_ROOT}/${CONFIGURATION}-iphoneos/${PROJECT_NAME}.framework

SIMULATOR_DIR=${BUILD_ROOT}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framework


if [ -d &quot;${INSTALL_DIR}&quot; ]
then
rm -rf &quot;${INSTALL_DIR}&quot;
fi

mkdir -p &quot;${INSTALL_DIR}&quot;

cp -R &quot;${DEVICE_DIR}/&quot; &quot;${INSTALL_DIR}/&quot;
#ditto &quot;${DEVICE_DIR}/Headers&quot; &quot;${INSTALL_DIR}/Headers&quot;

lipo -create &quot;${DEVICE_DIR}/${PROJECT_NAME}&quot; &quot;${SIMULATOR_DIR}/${PROJECT_NAME}&quot; -output &quot;${INSTALL_DIR}/${PROJECT_NAME}&quot;

#open &quot;${DEVICE_DIR}&quot;
#open &quot;${SRCROOT}/Products&quot;
fi
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/19.png" alt="19 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/20.png" alt="20 | center | 1080x0"/></p>

<blockquote>
<p>这里逮到一个错误, 不要慌, 因为我们之前是用<strong><code>Release</code></strong>模式的, 只要把<strong><code>Aggregate</code></strong>切换到<strong><code>Release</code></strong>模式, 再运行就可以了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/21.png" alt="21 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/22.png" alt="22 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/23.png" alt="23 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/24.png" alt="24 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_8">检测静态包</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/25.png" alt="25 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/26.png" alt="26 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/27.png" alt="27 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_9">测试静态包</h3>

<blockquote>
<p>测试的方法和<a href="https://cainrun.github.io/14729651532234.html">模拟器与真机静态Framework合成教程</a>这里面的测试方法一样, 这样就不多做解释了</p>

<p>但是这里还有一点需要注意一些, 由于我们刚刚在打包的时候, 是把<strong><code>TestTwoClass.h</code></strong>是丢到<strong><code>Private</code></strong>里面去的, 哪怕我们已经把头文件丢到<strong><code>TestTwo.h</code></strong>中, 然后再引用<strong><code>TestTwo.h</code></strong>, 依旧是没办法去调用<strong><code>TestTwoClass</code></strong>内部的任何东西, 怎么办呢?</p>

<p>我们只要去改改导入的头文件就可以了, 比如:</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/CreateGeneralFramework/master/AggregateFramework/images/28.png" alt="28 | center | 1080x0"/></p>

<blockquote>
<p>PS: 这种方式只是我们来玩玩而已, 基本上我们都会吧<strong><code>.h</code></strong>文件放到<strong><code>public</code></strong>中</p>
</blockquote>

<hr/>

<h3 id="toc_10">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/CreateGeneralFramework">https://github.com/CainRun/CreateGeneralFramework</a></p>

<hr/>

<h3 id="toc_11">结束语</h3>

<blockquote>
<p>好啦, 教程到这里就结束了, 谢谢大家的耐心观看</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 观察者模式》]]></title>
    <link href="https://cainrun.github.io/14719369255829.html"/>
    <updated>2016-08-23T15:22:05+08:00</updated>
    <id>https://cainrun.github.io/14719369255829.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这几天在捣鼓新项目, 在用通知中心的时候突然想到自己用了那么久的通知中心, 为啥不自己动手实现一个呢? 说干就干, 于是乎就研究通知中心的原理, 当然包括<strong><code>KVO</code></strong>, 这些都是基于<strong><code>观察者模式</code></strong>实现的, 既然知道了原理, 我们就Do It!!!</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>工厂模式</code><strong>, 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/ObserverUML.jpg" alt="ObserverUML"/></p>

<blockquote>
<p>说起观察模式, 其实可以举酱紫的一个例子, 就拿实验对象来说明, 研究者是<strong><code>观察者</code></strong>, 小白鼠是<strong><code>被观察者</code></strong>, 当研究者往小白鼠身上做某些实验的时候, 小白鼠会产生某些反应, 而研究者就会记录以及反馈观察对应的现象, 这种情况就叫做<strong><code>观察者模式</code></strong>.</p>

<p>说那么多废话, 直接上代码演示吧~~</p>
</blockquote>

<hr/>

<h3 id="toc_2">新建工程</h3>

<blockquote>
<p>依旧打开我们之前的那个<strong><code>workSpace</code></strong>工程, 然后新建一个<strong><code>ObserverPattern</code></strong>工程.</p>

<p>这里我们就拿微信公众号来举个例子, 首先我们要有一个微信公众号中心, 方便我们用来寻找我们想要的公众号.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/1.png" alt="1"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/2.png" alt="2"/></p>

<hr/>

<h3 id="toc_3">针对接口编程</h3>

<blockquote>
<p>这里普及一个思想, 就是<strong><code>针对接口编程</code></strong>, 说起<strong><code>针对接口编程</code></strong>, 估计会有一些道友会有迷惑, 啥是<strong><code>针对接口编程</code></strong>? 其实在我们日常开发当中, 我们就已经做到了<strong><code>针对接口编程</code></strong>, 只是我们本身没有意识到, 其实所谓的<strong><code>针对接口编程</code></strong>, 就是我们在写模块或者是在写SDK的时候, 我们会先设计对外公开的API, 然后再内部实现对应的逻辑, 这就是<strong><code>针对接口编程</code></strong>.</p>

<p>这里有一篇我觉得不错的文章<a href="http://blog.chinaunix.net/uid-20478213-id-1942005.html">针对接口编程</a>, 如果觉得不好, 可以去吐槽博主, 这我是不会反对的~</p>

<p>现在我们先去声明一些我们需要用到的API先.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_4">限制用户</h3>

<blockquote>
<p>虽然我们声明了一些接口, 但其实是还不够的, 因为公众号并不知道你是否有没有订阅, 如果没有订阅的话, 公众号发出来的消息, 你不可能会收到, 所以在这里我们需要声明一个<strong><code>Protocol</code></strong>, 用来限制<br/>
用户, 因为订阅号所发送的消息不是全部用户都能接收的, 只要订阅了该订阅号的用户才能收到订阅号所发出来的消息.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/4.png" alt="4"/></p>

<blockquote>
<p>记得要把对象换一下, 换成了遵守了改协议的对象才能去接收消息</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/5.png" alt="5"/></p>

<hr/>

<h3 id="toc_5">实现内部方法</h3>

<blockquote>
<p>现在我们对应的接口和限制用户的协议都已经写好了, 接下来我们就要去实现<strong><code>PublicNumberCenter</code></strong>里的方法, 这样子我们就可以完完整整的实现一个观察者模式了.</p>

<p>由于通知中心是属于单例, 首先我们肯定是要来实现一下单例模式</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/6.png" alt="6"/></p>

<blockquote>
<p>实现完通知中心之后, 我们就要来实现内部的方法, 这样子我们要的通知中心就完成了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/7.png" alt="7"/></p>

<hr/>

<h3 id="toc_6">调用自定义通知中心</h3>

<blockquote>
<p>写了那么久, 现在我们来尝试调用一下通知中心, 这里我们就简单实现一下, 就让<strong><code>ViewController</code></strong>成为用户, 遵守<strong><code>PublicNumberProtocol</code></strong>就好了.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ObserverPattern/ObserverPattern%E8%AF%B4%E6%98%8E/8.png" alt="8"/></p>

<hr/>

<h3 id="toc_7">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：界面调试工具《Reveal》]]></title>
    <link href="https://cainrun.github.io/14719229534493.html"/>
    <updated>2016-08-23T11:29:13+08:00</updated>
    <id>https://cainrun.github.io/14719229534493.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>Reveal</code></strong>研究，让我发现调试UI再也不像会以前那么的困难, 更加不会那么的蛋疼, 不需要每次都在脑海里想象出那个画面, 自从使用了<strong><code>Reveal</code></strong>之后, 麻麻再也不用担心我调界面难过了~</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>Reveal</code>** 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font>**</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">疑问</h3>

<blockquote>
<p>有童鞋可能会问, <strong><code>Xcode</code></strong>不是自带了有<a href="https://developer.apple.com/library/ios/recipes/xcode_help-debugger/using_view_debugger/using_view_debugger.html">Debug View Hierarchy in Xcode</a>么, 为啥还要用第三方的Reveal, 答案就是:&quot;因为苹果所提供的<strong><code>Debug View Hierarchy in Xcode</code></strong>弱爆了, 只能看看, 啥都不能操作, 而且还容易造成<strong><code>Xcode</code></strong>的卡顿, 比如一些电脑比较低配的, 卡死, 然后<strong><code>Xcode</code></strong>就一闪而过, 直接就<strong><code>Crash</code></strong>了.&quot;</p>

<p><a href="http://revealapp.com">Reveal</a>就不会出现这个问题, Reveal是一款图形调试工具, 支持iOS全设备的UI调试, 支持模拟器以及真机调试, 同时也支持实时UI效果的展示.</p>
</blockquote>

<hr/>

<h3 id="toc_2">添加Debug命令</h3>

<blockquote>
<p>打开<strong><code>Terminal</code></strong>, 输入命令</p>
</blockquote>

<pre><code class="language-vim">vim ~/.lldbinit 
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/0.png" alt="0"/></p>

<blockquote>
<p>添加命令</p>
</blockquote>

<pre><code class="language-vim">command alias reveal_load_sim expr (void*)dlopen(&quot;/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib&quot;, 0x2);  
command alias reveal_load_dev expr (void*)dlopen([(NSString*)[(NSBundle*)[NSBundle mainBundle] pathForResource:@&quot;libReveal&quot; ofType:@&quot;dylib&quot;] cStringUsingEncoding:0x4], 0x2);  
command alias reveal_start expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@&quot;IBARevealRequestStart&quot; object:nil];  
command alias reveal_stop expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@&quot;IBARevealRequestStop&quot; object: nil nil]; 
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/1.png" alt="1"/></p>

<p>这里解释一下命令的意思</p>

<blockquote>
<p><strong><code>reveal_load_sim</code></strong> 为模拟器加载reveal调试用的动态链接库<br/>
<strong><code>reveal_load_dev</code></strong> 为真机加载<br/>
<strong><code>reveal_start</code></strong>       启动reveal调试功能<br/>
<strong><code>reveal_stop</code></strong>         结束reveal调试功能</p>
</blockquote>

<hr/>

<h3 id="toc_3">在Xcode中启动Reveal</h3>

<blockquote>
<p>首先打开<strong><code>Xcode</code></strong>的工程, 去到<strong><code>AppDelegate</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/2.png" alt="2"/></p>

<blockquote>
<p>然后在<strong><code>application:didFinishLaunchingWithOptions</code></strong>方法中添加断点</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/3.png" alt="3"/></p>

<blockquote>
<p>编辑断点, 添加对应的代码</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/4.png" alt="4"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/5.png" alt="5"/></p>

<blockquote>
<p>运行工程, 如果看到控制台里输出以下酱紫的一行字, 就代表设置成功了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/6.png" alt="6"/></p>

<hr/>

<h3 id="toc_4">查看Reveal效果</h3>

<blockquote>
<p>看完上面的操作步骤, 只要你设置的都是正确的, 那就可以打开<strong><code>Reveal</code></strong>查看效果了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/7.png" alt="7"/></p>

<blockquote>
<p>如果你的模拟器切换了页面, <strong><code>Reveal</code></strong>是不会自动刷新的, 既然是酱紫, 那我们就需要做对应的操作</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/8.png" alt="8"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/9.png" alt="9"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/10.png" alt="10"/></p>

<hr/>

<h3 id="toc_5">特殊教程(无限试用)</h3>

<blockquote>
<p>打开你的<strong><code>Terminal</code></strong>, 然后输入以下命令</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/11.png" alt="11"/></p>

<blockquote>
<p>找到<strong><code>com.ittybittyapps.Reveal.plist</code></strong>文件删掉</p>

<p>PS: 这个文件每次运行的时候<strong><code>Reveal</code></strong>都会创建一次, 每次都是从第一天开始, 每次<strong><code>Reveal</code></strong>还有几天的时候, 再删掉, 就会再次从第一天开始.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E7%95%8C%E9%9D%A2%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E3%80%8AReveal%E3%80%8B/12.png" alt="12"/></p>

<blockquote>
<p><strong><font color=red>这里声明一点, 作者是希望大家都去购买正版, 而不是去寻找什么破解方法, 毕竟我们本身就是做软件的, 所以希望大家可以去支持支持正版.</font></strong></p>
</blockquote>

<hr/>

<h3 id="toc_6">附件</h3>

<blockquote>
<p>由于真机调试是需要修改<strong><code>Xcode</code></strong>工程配置, 不太适合团队协作, 所以这里我只提供了模拟器UI调试的方法, 如果有朋友需要真机调试, 这里有一个<a href="http://support.revealapp.com/kb/getting-started/integrating-reveal-add-reveal-to-your-xcode-project">官方教程</a>, 有兴趣的童鞋可以自行去查看</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 工厂模式》]]></title>
    <link href="https://cainrun.github.io/14718583940487.html"/>
    <updated>2016-08-22T17:33:14+08:00</updated>
    <id>https://cainrun.github.io/14718583940487.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>刚忙完就给我来一场大病, 多么痛的领悟, 好不容易好点了, 可以整理整理知识点了~</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>工厂模式</code><strong>, 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/FactoryPatternUML.jpg" alt="UML"/></p>

<blockquote>
<p>所谓<strong><code>工厂模式</code></strong>其实显示中的工厂没啥区别, 客户下单, 工厂负责做出产品出来交货, 这样子就没了, 至于工厂里面做了什么东西, 怎么实现, 我们完全不用关注, 只要知道工厂能按时交货就可以了.</p>
</blockquote>

<hr/>

<h3 id="toc_2">简单工厂与抽象工厂</h3>

<blockquote>
<p>在工厂模式当中, 又有两种不同的工厂模式, 分别是<strong><code>简单工厂</code></strong>与<strong><code>抽象工厂</code></strong>, 他们之前的区别也很简单, 无非就是一个是<strong><code>实例</code></strong>一个<strong><code>抽象</code></strong>, 这么说好像不太明确, 下面我们来建个工程, 看看<strong><code>简单工厂</code></strong>和<strong><code>抽象工厂</code></strong>两者之间到底有啥不一样~</p>
</blockquote>

<hr/>

<h3 id="toc_3">简单工厂</h3>

<blockquote>
<p>首先我们把之前的那个<strong><code>WorkSpace</code></strong>打开, 新建一个<strong><code>FactoryPattern</code></strong>工程, 然后我们再来新建一个工厂类, 这次我们就拿一个汽车工厂作为例子~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/1.png" alt="1"/></p>

<blockquote>
<p>接下来我们创建一个汽车的基类<strong><code>BaseCar</code></strong>, 还有一个协议, 这个协议是用来限制<strong><code>BaseCar</code></strong>或者<strong><code>BaseCar</code></strong>的子类实现一些必须实现的方法, 我这里只是做演示, 所以<strong><code>BaseCar</code></strong>类里面空实现就好了, 其他的交给子类去实现.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/2.png" alt="2"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/3.png" alt="3"/></p>

<blockquote>
<p>汽车的基类我们已经有了, 现在我们来建立一个汽车工厂类, 就拿全球最大的汽车厂商通用来做例子, 在这里我们会拿通用汽车的几个旗下品牌来做例子, 且都继承与<strong><code>BaseCar</code></strong>, 然后给他们对应做一些差异化的操作就OK了~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/4.png" alt="4"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/5.png" alt="5"/></p>

<blockquote>
<p>现在我们来实现<strong><code>Protocol</code></strong>里的方法再加一些差异化, 酱紫我们就知道到时候初始化出来的汽车是哪辆了~~<br/>
我们先拿<strong><code>Buick</code></strong>来做例子, 添加一个差异化方法, 然后再看看我们利用工厂模式初始化出来的对象是不是<strong><code>Buick</code></strong>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/6.png" alt="6"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/7.png" alt="7"/></p>

<blockquote>
<p>其他的几个品牌车子也是同理进行就可以了, 这里就不做演示了, 代码当中我会填上去, 到时候大家去下载源码下来看看就哦了~~</p>

<p><strong><code>简单工厂</code></strong>到这里就基本上搞定了, 下面就让我们来看看什么是<strong><code>抽象工厂</code></strong>.</p>
</blockquote>

<hr/>

<h3 id="toc_4">抽象工厂</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/AbstractFactoryUML.jpg" alt="AbstractFactoryUML"/></p>

<blockquote>
<p>其实所谓的<strong><code>抽象工厂</code></strong>与<strong><code>简单工厂</code></strong>最大的却别, 就是把工厂类做成一个抽象的对象, 比<strong><code>简单工厂</code></strong>多了一层抽象层, 然后使用一个管理者去管理这些对应的厂商, 用户可以根据自己的需求, 向不同的厂商拿货, 这就像是超市似得, 一个类别的商品有好几个或者是十几个不同的厂商在供货, 可以让消费者, 根据自己的消费水平或者需求来选择不同厂商的产品, 下面让我们用代码说话~</p>
</blockquote>

<hr/>

<h3 id="toc_5">新建抽象工厂目录</h3>

<blockquote>
<p>在开始之前, 我们肯定要先规划好文件夹的目录, 以免与之前的<strong><code>简单工厂</code></strong>类搞混, 下面就是我们的文件夹结构.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/8.png" alt="8"/></p>

<blockquote>
<p>接下来我们就要去新建我们的<strong><code>BaseFactory</code></strong>以及<strong><code>BaseCar</code></strong>, 但是这里由于之前已经有<strong><code>BaseCar</code></strong>这个类了, 为了区别, 我们在新建的<strong><code>BaseCar</code></strong>前面加个前缀<strong><code>Ab</code></strong>, 酱紫就好了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/9.png" alt="9"/></p>

<blockquote>
<p>声明且实现<strong><code>AbBaseFactory</code></strong>的一个方法.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/10.png" alt="10"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/11.png" alt="11"/></p>

<blockquote>
<p>新建完成之后, 我们就需要继续, 这次我们拿<strong><code>长安</code></strong>和<strong><code>广汽</code></strong>两个厂商做例子, 车型的话, 我就随便挑两个, 一个是<strong><code>凯美瑞</code></strong>, 一个是<strong><code>昂克赛拉</code></strong>(我是随便取的两辆车啊, 百度一搜就出来这两个货了, 要怪就怪百度去吧).</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/12.png" alt="12"/></p>

<hr/>

<h3 id="toc_6">完善对应的工厂</h3>

<blockquote>
<p>新建完这些类之后, 我们需要分别给对应的厂商添加对应的车型, <strong><code>长安-马自达</code></strong>, <strong><code>广汽-凯美瑞</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/13.png" alt="13"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/14.png" alt="14"/></p>

<hr/>

<h3 id="toc_7">工厂管理者</h3>

<blockquote>
<p>在完成了之前的工作之后, 现在我们来看看<strong><code>抽象工厂</code></strong>的核心, 工厂管理者(FactoryManager).</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/15.png" alt="15"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/16.png" alt="16"/></p>

<blockquote>
<p>酱紫, 我们就完成了<strong><code>抽象工厂</code></strong>的所有步骤了, 下面让我们来使用一下<strong><code>抽象工厂</code></strong>.</p>
</blockquote>

<hr/>

<h3 id="toc_8">使用抽象工厂</h3>

<blockquote>
<p>完成了所有步骤之后, 我们就来使用一下<strong><code>抽象工厂</code></strong>, 看看到底是不是我们所要的东西.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/17.png" alt="17"/></p>

<blockquote>
<p>嘿嘿, 到这里, 我们就完成了<strong><code>工厂模式</code></strong>的<strong><code>简单工厂</code></strong>和<strong><code>抽象工厂</code></strong>了, 非常的简单, 如果你们需要对应的文档和代码, 请到我的<strong><code>GitHub</code></strong>里, 地址就在下面</p>
</blockquote>

<hr/>

<h3 id="toc_9">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：iOS 8 新特性《Share Extension》]]></title>
    <link href="https://cainrun.github.io/14718547536103.html"/>
    <updated>2016-08-22T16:32:33+08:00</updated>
    <id>https://cainrun.github.io/14718547536103.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>在前阵子我写了另外一篇文章也是关于iOS 8新特性的, 叫做<strong><a href="https://github.com/CainRun/TodayExtensionExample/blob/master/README.md">玩转iOS开发：iOS 8 新特性《Today Extension》</a></strong>, 这里面讲解就是iOS 8其中一个特性, 由于工作比较忙, 所以一直在拖着, 没有继续往下研究, 现在终于有时间抽出来可以研究一下</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<code>Share Extension</code>, 祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>什么是<strong><code>Share Extension</code></strong>? 在iOS 8的时候, 苹果开放了几个新特性, 其中一个就是<strong><code>Share Extension</code></strong>, 大家可以打开苹果自己自带的浏览器<strong><code>Safari</code></strong>, 随便选中一个网站, 点击分享, 就会出现一个分享界面, 中间的那条<strong><code>iCon</code></strong>栏目就是系统自带的<strong><code>Share Extension</code></strong>(如图所示), 说白了就是把<strong><code>Safari</code></strong>的网站地址分享出去罢了, 所以说<strong><code>Share Extension</code></strong>其实就是系统自带的社会化SDK罢了, 说那么多道理, 还不如直接上代码~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/1.jpg" alt="1 | center | 480x0"/></p>

<hr/>

<h3 id="toc_2">创建新工程</h3>

<blockquote>
<p>首先我们需要先创建一个新的工程, 由于<strong><code>Share Extension</code></strong>不是一个独立的应用, 它是需要依赖于主程序, 创建新工程的顺序我就省略了, 这里的新工程叫做<strong><code>ShareExtensionDemo</code></strong>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/2.png" alt="2 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_3">创建Share Extension</h3>

<blockquote>
<p>创建完新工程之后, 我们现在来创建<strong><code>Share Extension</code></strong>和<strong><code>Today Extension</code></strong>一样, 系统是有自带的模板给我们自己选择</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/3.png" alt="3 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/4.png" alt="4 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/5.png" alt="5 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/6.png" alt="6 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_4">配置主应用</h3>

<blockquote>
<p>现在新工程和<strong><code>Share Extension</code></strong>已经创建完成, 现在我们可以在主应用当中调起<strong><code>Share Extension</code></strong>来看看效果, 这里我为了方便, 所以使用的是<strong><code>StoryBoard</code></strong>.</p>

<p>拖一个<strong><code>UIButton</code></strong>到<strong><code>StoryBoard</code></strong>, 改名为<strong><code>Share</code></strong>, 然后关联<strong><code>Action</code></strong>事件到<strong><code>ViewController</code></strong>, 添加对应的代码.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/7.png" alt="7 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/8.png" alt="8 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/9.png" alt="9 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/10.png" alt="10 | center | 1080x0"/></p>

<pre><code class="language-objectivec">- (IBAction)ShareAction:(UIButton *)sender {
    
    NSString *string = @&quot;您好&quot;;
    
    UIActivityViewController *activityController = [[UIActivityViewController alloc] initWithActivityItems:@[string]
                                                                                     applicationActivities:nil];
    
    [self presentViewController:activityController
                       animated:YES
                     completion:nil];
}
</code></pre>

<blockquote>
<p>现在让我们来看看对应的效果吧~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/11.png" alt="11 | center | 480x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/12.png" alt="12 | center | 480x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/13.png" alt="13 | center | 480x0"/></p>

<blockquote>
<p>现在我们看到了<strong><code>Share Extension</code></strong>展示出来的效果, 但酱紫还是不够的, 继续继续~</p>
</blockquote>

<hr/>

<h3 id="toc_5">配置Share Extension</h3>

<blockquote>
<p>在配置<strong><code>Share Extension</code></strong>之前, 我们需要看看里面的几个方法, 不然我们完全都是蒙圈的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/14.png" alt="14 | center | 1080x0"/></p>

<pre><code class="language-objectivec">// 如果是return No, 那么发送按钮就无法点击, 如果return YES, 那么发送按钮就可以点击
- (BOOL)isContentValid {
    // Do validation of contentText and/or NSExtensionContext attachments here
    return YES;
}
</code></pre>

<pre><code class="language-objectivec">// 发送按钮的Action事件
- (void)didSelectPost {
    // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
    
    // Inform the host that we&#39;re done, so it un-blocks its UI. Note: Alternatively you could call super&#39;s -didSelectPost, which will similarly complete the extension context.
    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
}
</code></pre>

<pre><code class="language-objectivec">// 这个方法是用来返回items的一个方法, 而且返回值是数组
- (NSArray *)configurationItems {
    // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.
    return @[];
}
</code></pre>

<hr/>

<h3 id="toc_6">配置NSExtension</h3>

<blockquote>
<p>我们知道了上面那几个方法之后, 现在来配置一下我们可传送的内容规则, 这些规则分别是</p>
</blockquote>

<table>
<thead>
<tr>
<th style="text-align: center">iOS扩展插件支持媒体类型配置键</th>
<th style="text-align: center">描述</th>
<th style="text-align: center">说明</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsAttachmentsWithMaxCount</td>
<td style="text-align: center">附件最多限制: 20</td>
<td style="text-align: center">附件包括下面的File、Image和Movie三大类，单一、混选总量不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsAttachmentsWithMinCount</td>
<td style="text-align: center">附件最多限制: 上面非零时default=1</td>
<td style="text-align: center">默认至少选择1个附件，[Share Extension]中才显示扩展插件图标</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsWebURLWithMaxCount</td>
<td style="text-align: center">Web链接最多限制: default=0</td>
<td style="text-align: center">默认不支持分享超链接，例如[Safari]</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsFileWithMaxCount</td>
<td style="text-align: center">文件最多限制: 20</td>
<td style="text-align: center">单一、多选均不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsWebPageWithMaxCount</td>
<td style="text-align: center">Web页面最多限制: default=0</td>
<td style="text-align: center">默认不支持Web页面分享，例如[Safari]</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsImageWithMaxCount</td>
<td style="text-align: center">图片最多限制: 20</td>
<td style="text-align: center">单一、多选均不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsVideoWithMaxCount</td>
<td style="text-align: center">视频最多限制: 20</td>
<td style="text-align: center">单一、多选均不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsText</td>
<td style="text-align: center">文本类型: default=0</td>
<td style="text-align: center">默认不支持文本分享，例如[备忘录]</td>
</tr>
</tbody>
</table>

<blockquote>
<p>其实这个表格在<strong><a href="https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html">官网文档</a></strong>都是可以找到的~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/15.png" alt="15 | center | 1080x0"/></p>

<hr/>

<h1 id="toc_7"><center>Share Extension逻辑</center></h1>

<h3 id="toc_8">填写限制字数长度的逻辑</h3>

<blockquote>
<p>首先我们来填写一个东东, 就是限制<strong><code>Share Extension</code></strong>的可输入字数长度, 然后添加一个分享路径</p>

<p>这里特别需要强调一点哈, 因为<strong><a href="http://requestb.in/1hx20w61">http://requestb.in/1hx20w61</a></strong>这个链接是需要自己去手动申请的, 而且是居然时效性的, 如果失效了, 那就自己去<strong><a href="http://requestb.in">http://requestb.in</a></strong>再申请一个就好了.</p>
</blockquote>

<pre><code class="language-objectivec">// 限制字数, 最多只能输入40个
static NSInteger const maxCharactersAllowed = 40;
// 这是一个测试连接, 并不是固定的, 你可以去http://requestb.in申请, 然后替换到你最新申请的连接即可
static NSString *uploadURL = @&quot;http://requestb.in/1hx20w61&quot;;
</code></pre>

<blockquote>
<p>声明完了字数长度, 我们需要去<strong><code>- (BOOL)isContentValid</code></strong>方法中实现</p>
</blockquote>

<pre><code class="language-objectivec">- (BOOL)isContentValid {
    
    NSInteger length = self.contentText.length;
    
    self.charactersRemaining = @(maxCharactersAllowed - length);
    
    return self.charactersRemaining.integerValue &lt; 0 ? NO : YES;
}
</code></pre>

<hr/>

<h3 id="toc_9">填写上传信息的逻辑</h3>

<blockquote>
<p>在这里我用原生的网络请求进行请求发送, 大家也可以去使用<strong><a href="https://github.com/AFNetworking/AFNetworking">AFNetWorking</a></strong>, Swift的话可以去使用另外一个网络请求框架<strong><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></strong>, 作者都是同一个大神</p>

<p>在写逻辑之前, 我们需要打开App的一个Group功能, 并且填写对应的参数, 不然没法传送数据.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/16.png" alt="16 | center | 1080x0"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/17.png" alt="17 | center | 1080x0"/></p>

<blockquote>
<p>同样的, <strong><code>Share Extension</code></strong>也需要同样的操作, 这里就不做重复的操作了, 现在我们继续来填写对应的网络操作逻辑</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/18.png" alt="18 | center | 1080x0"/></p>

<blockquote>
<p>首先, 我们需要封装一个返回<strong><code>NSURLRequest</code></strong>的方法</p>
</blockquote>

<pre><code class="language-objectivec">/**
 *  返回一个NSURLRequest方法, 需要传入一个NSString对象
 *
 *  @param string 需要发送出去的字符串
 *
 *  @return NSURLRequest
 */
- (NSURLRequest *)urlRequestWithString:(NSString *)string {
    
    NSURL *url = [NSURL URLWithString:uploadURL];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    
    [request addValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];
    [request addValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];
    
    request.HTTPMethod = @&quot;POST&quot;;
    
    NSMutableDictionary *jsonObject = [NSMutableDictionary dictionary];
    
    jsonObject[@&quot;text&quot;] = string;
    
    NSError *jsonError;
    NSData *jsonData;
    
    jsonData = [NSJSONSerialization dataWithJSONObject:jsonObject options:NSJSONWritingPrettyPrinted error:&amp;jsonError];
    
    if (jsonData) {
        
        request.HTTPBody = jsonData;
    } else {
        
        NSLog(@&quot;JSON Error: %@&quot;, jsonError.localizedDescription);
    }
    
    return request;
}
</code></pre>

<blockquote>
<p>然后在<strong><code>- (void)didSelectPost</code></strong>点击事件中去调用</p>
</blockquote>

<pre><code class="language-objectivec">- (void)didSelectPost {

    NSString *configName = @&quot;com.shareExtension.ShareExtensionDemo.BackgroundSessionConfig&quot;;

    NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:configName];
    
    sessionConfig.sharedContainerIdentifier = @&quot;group.ShareExtension&quot;;
    
    NSURLSession *session = [NSURLSession sessionWithConfiguration:sessionConfig];
    
    NSURLRequest *urlRequest = [self urlRequestWithString:self.contentText];
    
    NSURLSessionTask *task = [session dataTaskWithRequest:urlRequest];
    
    [task resume];
    
    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
}
</code></pre>

<blockquote>
<p>这样子就完事了, 由于我这里不知道为啥用模拟器一直没法进行网络请求, 只能用真机测试了, 不知道是不是我配置的问题, 如果有知道的大神麻烦请告知一声, 谢谢啦~~现在我们再来重复一下刚开始的操作, 发送请求到指定的<strong><code>URL</code></strong>里去.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/19.png" alt="19 | center | 480x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/20.png" alt="20 | center | 1080x0"/></p>

<blockquote>
<p>酱紫我们就搞定了<strong><code>Share Extension</code></strong>, 灰常的简单</p>
</blockquote>

<hr/>

<h3 id="toc_10">自定义UI</h3>

<blockquote>
<p>这里补充一点, 其实<strong><code>Share Extension</code></strong>说白了就是一个<strong><code>UIViewController</code></strong>, 所以你可以根据你的喜好来进行UI定制, 详细资料大家可以去苹果官网或者<strong><code>Google</code></strong>搜搜, 百度的话, 你们懂得</p>
</blockquote>

<hr/>

<h3 id="toc_11">补充篇文章</h3>

<blockquote>
<p>这里再补充篇文章, 关于Share Extension的, 是用Swift写的, 里面有一些问题, 会导致<strong><code>NSURLRequest</code></strong>返回为<strong><code>nil</code></strong>, 大家单步调试一下就知道为什么了</p>
</blockquote>

<p><a href="http://letsswift.com/2014/09/ios8-day-by-day-day2/">iOS8 Day-by-Day– Day2 — 分享应用扩展</a></p>

<hr/>

<h3 id="toc_12">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/ShareExtensionDemo">https://github.com/CainRun/ShareExtensionDemo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：iOS 8 新特性《Today Extension》]]></title>
    <link href="https://cainrun.github.io/14718509058148.html"/>
    <updated>2016-08-22T15:28:25+08:00</updated>
    <id>https://cainrun.github.io/14718509058148.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>Today Extension</code></strong>预研，让我觉得自己还有很多的不足，因为还有很多东西都没有去仔细的去研究，以后接下来会继续再接再厉。</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<code>Today Extension</code>, 祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p><strong><code>Today Extension</code></strong>是在<strong><code>iOS 8</code></strong>之后所推出来的重大更新之一，在此之前， 或许有人看过部分<strong><code>App</code></strong>就已经实现过这些功能，但那种实现方式是并不是系统所提供的，所以在性能方面需要打个问号。</p>
</blockquote>

<hr/>

<h3 id="toc_2">创建Today Extension</h3>

<blockquote>
<p>开始创建Today Extension</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/0.png" alt="0"/></p>

<blockquote>
<p>选择<strong><code>Today Extension</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/1.png" alt="1"/></p>

<blockquote>
<p>激活<strong><code>Today Extension</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/2.png" alt="2"/></p>

<hr/>

<h3 id="toc_3">使用Storyboard实现Today Extension</h3>

<blockquote>
<p>在创建好<strong><code>Today Extension</code></strong>时，<strong><code>Xcode</code></strong>会自动创建一个对应的<strong><code>MainInterface.storyboard</code></strong>文件，并且与<strong><code>Today Extension</code></strong>的<strong><code>Controller</code></strong>关联，打开<strong><code>MainInterface.storyboard</code></strong>, 我们会看到有一个内容为<strong><code>Hello World</code></strong>的<strong><code>UILabel</code></strong>，废话少说现在我们来看看运行效果。</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/3.png" alt="3"/></p>

<blockquote>
<p>选择你需要关联启动的App</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/4.png" alt="4"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/5.png" alt="5"/></p>

<blockquote>
<p>不要怀疑，就是这么简单的，<strong><code>Today Extension</code></strong>就这么出来了。</p>
</blockquote>

<hr/>

<h3 id="toc_4">打开数据共享服务</h3>

<blockquote>
<p>不过，骚年郎们别着急，只是展示个<strong><code>Hello World</code></strong>而已，别高兴得太早，接下来我们讲重头戏，也就是应用<strong><code>App</code></strong>与<strong><code>Today Extension</code></strong>的数据交互，在此之前， 我们需要打开两个服务。</p>

<p>首先是主程序里的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/6.png" alt="6"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/7.png" alt="7"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/8.png" alt="8"/></p>

<blockquote>
<p>再者呢，就是<strong><code>Today Extension</code></strong>里的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/9.png" alt="9"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/10.png" alt="10"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/11.png" alt="11"/></p>

<blockquote>
<p>做完这两个操作之后，我们会看到多出来的两个<strong><code>证书</code></strong>。</p>

<p>PS：<font color=red><strong>这个证书是收费的， 如果没有去申请，一个账号可以免费测试10个证书，主应用1个，Today Extension插件1个，也就是说一个应用需要两个。</strong></font></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/12.png" alt="12"/></p>

<hr/>

<h3 id="toc_5">删掉Storyboard</h3>

<blockquote>
<p>接下来之前，我们要把<strong><code>MainInterface.storyboard</code></strong>给干掉，毕竟代码才是王道（个人观点，不喜勿喷）如果喜欢用<strong><code>Storyboard</code></strong>的朋友，也有一个<a href="https://github.com/CainRun/TodayExtensionExample/tree/master/TodayExtension-Storyboard">Storyboard</a>版本的，后面再补上，废话就不多说了，上教程。</p>

<p>找到<strong><code>TodayI Extension</code></strong>中的<strong><code>Info.plist</code></strong>文件，看到这小样就在这，先留着先</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/13.png" alt="13"/></p>

<blockquote>
<p>手动添加<strong><code>NSExtensionPrincipalClass</code></strong>字段 并设为<strong><code>TodayViewController</code></strong>（这个<strong><code>Controller</code></strong>你可以自己指定，我这里为了方便，就直接拿<strong><code>Xcode</code></strong>生成的）</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/14.png" alt="14"/></p>

<blockquote>
<p>现在我们可以把<strong><code>storyboard</code></strong>这小样给删掉了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/15.png" alt="15"/></p>

<blockquote>
<p>再运行，你就会看到整个<strong><code>Today Extension</code></strong>是空的了，只有一个空图标和一个标题。</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/16.png" alt="16"/></p>

<hr/>

<h3 id="toc_6">代码实现</h3>

<blockquote>
<p>主应用中，我们需要设置一下<strong><code>NSUserDefault</code></strong></p>
</blockquote>

<pre><code class="language-objectivec">- (void)viewDidLoad {
    [super viewDidLoad];
    
    NSUserDefaults *userDefault = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.todayExtensionCodeExample&quot;];
    [userDefault setObject:@&quot;tips&quot; forKey:@&quot;group.todayExtensionCodeExample.tips&quot;];
}

</code></pre>

<blockquote>
<p>现在我们进入<strong><code>TodayViewController</code></strong>开始写代码了</p>
</blockquote>

<pre><code class="language-objective-c">interface TodayViewController () &lt;NCWidgetProviding&gt;

@property (nonatomic, strong) UIView *contentView;
@property (nonatomic, strong) UILabel *tipsLabel;

@end

@implementation TodayViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    /**
     *  设置Today Extension的Size
     *
     *  @param 0   Today Extension的宽度是不可变的，所以这里随便给个0就好了
     *  @param 150 高度是可控制的，这里我给了一个固定值150
     *
     *  @return CGSize
     */
    self.preferredContentSize = CGSizeMake(0, 150);
    
    /**
     *  初始化一个UIView，且设置它的属性
     */
    self.contentView = [[UIView alloc] initWithFrame:CGRectMake(0,
                                                                0,
                                                                self.view.frame.size.width,
                                                                self.view.frame.size.height)];
    self.contentView.backgroundColor = [UIColor whiteColor];
    
    [self.view addSubview:self.contentView];

    /**
     *  初始化一个Label，并且设置它的属性
     *
     */
    self.tipsLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 50, self.view.frame.size.width, 30)];
    
    self.tipsLabel.text            = @&quot;这是一个测试代码&quot;;
    self.tipsLabel.numberOfLines   = 0;
    self.tipsLabel.textColor       = [UIColor blackColor];
    self.tipsLabel.backgroundColor = [UIColor redColor];

    [self.view addSubview:self.tipsLabel];
    
    /**
     *  获取主应用传过来的数据
     */
    NSUserDefaults *userDefault = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.todayExtensionCodeExample&quot;];
    
    NSString *nickName = [userDefault objectForKey:@&quot;group.todayExtensionCodeExample.tips&quot;];
    
    if (nickName) {
        
        NSString *message = @&quot;今天XX又给你准备了很多惊喜哦，快去看看吧！&quot;;
        
        self.tipsLabel.text = [NSString stringWithFormat:@&quot;%@,%@&quot;, nickName, message];
    }
}

/**
 *  该方法是用来设置Today Extension的偏移，默认会像左偏移
 *
 *  @param defaultMarginInsets UIEdgeInsets
 *
 *  @return UIEdgeInsets
 */
- (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets {
    
    return UIEdgeInsetsZero;
}

/**
 *  该方法是用来刷新Today Extension数据的
 *
 *  @param completionHandler
 */
- (void)widgetPerformUpdateWithCompletionHandler:(void (^)(NCUpdateResult))completionHandler {
    // Perform any setup necessary in order to update the view.
    
    // If an error is encountered, use NCUpdateResultFailed
    // If there&#39;s no update required, use NCUpdateResultNoData
    // If there&#39;s an update, use NCUpdateResultNewData

    completionHandler(NCUpdateResultNewData);
}

@end
</code></pre>

<hr/>

<h3 id="toc_7">从Today Extension跳转至App</h3>

<blockquote>
<p>首先，我们需要添加<strong><code>Identifier</code></strong>，以及<strong><code>URL Schemes</code></strong>。</p>

<p><font color=purple><strong>PS：这里的</strong><code>Identifier</code><strong>和</strong><code>URL Schemes</code><strong>是你自己定义的，不能与其他</strong><code>Application</code><strong>的</strong><code>Identifier</code><strong>、</strong><code>URL Schemes</code><strong>相同，否则会造成冲突。</strong></font></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/17.png" alt="17"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/18.png" alt="18"/></p>

<blockquote>
<p>然后呢，我们去到主应用的<strong><code>AppDelegate.m</code></strong>文件中添加方法</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/19.png" alt="19"/></p>

<blockquote>
<p>最后，我们去到<strong><code>TodayViewController</code></strong>里补上对应的方法就好了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/20.png" alt="20"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/21.png" alt="21"/></p>

<hr/>

<h3 id="toc_8">最终效果</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/22.png" alt="22"/></p>

<hr/>

<h3 id="toc_9">注意点</h3>

<p><strong>PS：在保证代码正确的前提下，如果遇到</strong><code>Today Extension</code><strong>无法加载数据，或者其他异常，可以把</strong><code>Application</code><strong>删掉，插件也删掉，</strong><code>Clear</code><strong>一下</strong><code>Project</code><strong>，在运行即可。</strong></p>

<hr/>

<h3 id="toc_10">补上几篇文章</h3>

<p><a href="http://www.jianshu.com/p/ab268a1ae000">iOS 8 Extension之Today插件</a></p>

<p><a href="https://onevcat.com/2014/08/notification-today-widget/">WWDC 2014 Session笔记 - iOS 通知中心扩展制作入门</a></p>

<p><a href="http://adad184.com/2014/10/29/how-to-setup-today-extension-programmatically/">如何用纯代码构建一个Widget(today extension)</a></p>

<hr/>

<h3 id="toc_11">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/TodayExtensionExample">https://github.com/CainRun/TodayExtensionExample</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 代理模式》]]></title>
    <link href="https://cainrun.github.io/14718501007074.html"/>
    <updated>2016-08-22T15:15:00+08:00</updated>
    <id>https://cainrun.github.io/14718501007074.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>上次我们知道了<strong><code>单例模式</code></strong>是怎么回事, 现在我们来探讨一下什么叫做<strong><code>代理模式</code></strong>.</p>

<p>其实所谓的代理模式在我们日常生活中非常的常见, 比如买车, 各式各样的牌子都有, 但这些汽车生产商又不可能自己掏钱在每个城市的每个角落都开一家自己的直营店, 所以他们会去招一些第三方的代理商进行分销, 而这个就是我们今天所要说的<strong><code>代理模式</code></strong>.</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>代理模式</code><strong>, 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/ProxyPatternUML.png" alt="ProxyPatternUM"/></p>

<blockquote>
<p>这是一张<strong><code>代理模式</code></strong>的UML图, 同样也很简单的讲解了<strong><code>代理模式</code></strong>到底是怎么回事</p>

<p>顺序如下: <br/>
- 1.<strong><code>Client(客户)</code></strong>向<strong><code>Subject(代理店)</code></strong>发起购买汽车的请求<br/>
- 2.<strong><code>Subject(代理店)</code></strong>会向<strong><code>Proxy(生产商)</code></strong>进行提单<br/>
- 3.<strong><code>Proxy(生产商)</code></strong>按照提单进行交货给<strong><code>Subject(代理店)</code></strong><br/>
- 4.<strong><code>Subject(代理点)</code></strong>再交付给<strong><code>Client(客户)</code></strong>, </p>
</blockquote>

<hr/>

<h3 id="toc_2">创建工程</h3>

<blockquote>
<p>打开我们自己创建的<strong><code>DesignPatternWork</code></strong>文件夹, 里面有我们之前所创建的<strong><code>DesignPatternWorkSpace</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/1.png" alt="1"/></p>

<blockquote>
<p>添加我们所要创建的新工程, 命名为<strong><code>ProxyPattern</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/2.png" alt="2"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/3.png" alt="3"/></p>

<hr/>

<h2 id="toc_3"><center>创建代理类</center></h2>

<h3 id="toc_4">声明代理类</h3>

<blockquote>
<p>这里我们就拿奥迪这个汽车生产商来进行演示, 原谅我是个奥迪控~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/4.png" alt="4"/></p>

<hr/>

<h3 id="toc_5">声明代理方法</h3>

<blockquote>
<p>在这里声明两个代理方法, 但他们有所区别, 一个是必须实现, 一个是可选类型的, 由于方法名自注释, 我这里就不添加注释了.</p>
</blockquote>

<pre><code class="language-objectivec">@required
- (void)audiManufacturer:(AudiManufacturer *)audiManufacturer
           orderQuantity:(NSInteger)orderQuantity;
</code></pre>

<pre><code class="language-objectivec">@optional
- (void)audiManufacturer:(AudiManufacturer *)audiManufacturer
            audiDelegateInfo:(NSString *)audiDelegateInfo;
</code></pre>

<blockquote>
<p>解释一下, 为什么我们需要在代理方法中提供代理类, 其实这个很好理解, 打个比方, 就拿奥迪来说吧, 一个品牌的车子, 肯定有不同的型号, 而每个型号不一定都是在同一家工厂里生产的, 这个时候我们就需要区分生产地, 所以我们为了提供外部去区分, 就需要在代理方法中提供代理类<strong><code>(个人理解, 不是官方语言哈)</code></strong>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/5.png" alt="5"/></p>

<hr/>

<h3 id="toc_6">内部实现代理方法</h3>

<blockquote>
<p>在内部实现两个对方开放的方法</p>
</blockquote>

<pre><code class="language-objectivec">- (void)buyCarCount:(NSInteger)count;
- (void)buyCarModel:(NSString *)model;
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/6.png" alt="6"/></p>

<hr/>

<h3 id="toc_7">外部调用代理</h3>

<blockquote>
<p>代理类以及代理方法我们已经完成了, 接下来我们就要在外部去实现了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/7.png" alt="7"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/8.png" alt="8"/></p>

<hr/>

<h2 id="toc_8"><center>代理与协议的区别</center></h2>

<h3 id="toc_9">代理与协议</h3>

<blockquote>
<p>到这里, 我们已经完成了整个代理模式的所有要求了, 但还有一些小细节需要提提.</p>

<p><strong><code>代理职能:</code></strong>降低对象与对象之间的耦合度<br/>
 <strong><code>协议职能:</code></strong>主要是用来约束对象或筛选对象<br/>
 <strong><code>代理与协议的相似:</code></strong>代理与协议都是使用<strong><code>@protocol</code></strong>来进行声明, 并且提供方法的一种模式, 看起来没啥不一样.<br/>
 <strong><code>代理与协议的不同:</code></strong>其实就如同它们的职能所说, <strong><code>代理</code></strong>是为了降低对象与对象之间的耦合度, <strong><code>协议</code></strong>是用来约束对象或筛选对象</p>
</blockquote>

<hr/>

<h3 id="toc_10">创建协议</h3>

<blockquote>
<p>这里我们用代码演示一下吧, 这样子更加的简单明了, 不过这里要注意一下, <strong><code>Protocol</code></strong>是没有<strong><code>.m</code></strong>文件的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/9.png" alt="9"/></p>

<hr/>

<h3 id="toc_11">创建顾客类</h3>

<blockquote>
<p>创建完协议就要创建顾客了, 并且这个顾客类是必须遵守我们创建的<strong><code>Protocol</code></strong>, 然后在这个<strong><code>Protocol</code></strong>里加个判断.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/10.png" alt="10"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/11.png" alt="11"/></p>

<blockquote>
<p>现在我们来初始化一下这个顾客类, 并且校验一下我们所写的<strong><code>Protocol</code></strong>是否生效.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/12.png" alt="12"/></p>

<blockquote>
<p>先输入<strong><code>10000</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/13.png" alt="13"/></p>

<blockquote>
<p>再输入<strong><code>1000000</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/ProxyPattern/ProxyPattern%E8%AF%B4%E6%98%8E/14.png" alt="14"/></p>

<hr/>

<h3 id="toc_12">补充一点</h3>

<blockquote>
<p>其实在iOS中, 就有一个类叫做<strong><code>NSProxy</code></strong>, 它也可以用来实现<strong><code>代理模式</code></strong>, 但在这里先不做介绍, 后面有时间再另外写一篇文章去讲解怎么用<strong><code>NSProxy</code></strong>去实现代理模式, 如果有好奇心特别重的朋友, 也可以自行去翻查一下资料~</p>
</blockquote>

<hr/>

<h3 id="toc_13">最后总结</h3>

<blockquote>
<p>经过上面的演示, 就知道<strong><code>代理模式</code></strong>并没有想象中那么复杂, 说白了, 所谓的<strong><code>代理模式</code></strong>就是为了降低对象与对象之间的耦合度, 为了方便维护罢了, 同时我们也知道了<strong><code>代理</code></strong>与<strong><code>协议</code></strong>之间的区别, 这篇文章就到了, 谢谢大家的观看~</p>
</blockquote>

<hr/>

<h3 id="toc_14">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 单例模式》]]></title>
    <link href="https://cainrun.github.io/14718491333111.html"/>
    <updated>2016-08-22T14:58:53+08:00</updated>
    <id>https://cainrun.github.io/14718491333111.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>有一段时间没有发博客了, 刚好现在忙完项目的需求, 现在可以闲下来写写博客, 顺便自己给自己复习巩固一下知识, 不过我在这里又要吐槽一句, 项目中遇到了一个单例的问题, 让我感到非常的蛋疼, 写这个单例的人只是单纯了为了写单例而写单例, 没有想到会发生什么, 现在让我们一起来看看什么叫单例吧.</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>单例模式</code>** 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font>**</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/SingletonUML.jpg" alt="SingletonUM"/></p>

<blockquote>
<p>这是一张单例的<strong><code>UML</code></strong>图, 非常简单明了的讲解单例类到底是怎么回事, 通常单例是用来作为管理中心, 或者是通知中心, 比如在<strong><code>iOS</code></strong>当中的<strong><code>NSNotificationCenter</code></strong>, <strong><code>[[UIApplication sharedApplication] statusBarStyle]</code></strong>, <strong><code>NSUserDefaults</code></strong>, <strong><code>[NSFileManager defaultManager]</code></strong>等等都是单例, 单例类有几个特征.</p>

<ul>
<li>系统当中只有一个实例</li>
<li>易于外界访问</li>
<li>防止子类继承</li>
<li>共享信息</li>
</ul>
</blockquote>

<hr/>

<h3 id="toc_2">准备工作</h3>

<blockquote>
<p>首先, 我们先来建一个<strong><code>WorkSpace</code></strong>, 这样子方便我们以后多添加工程, 因为单例模式只是我们的开始.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/1.png" alt="1"/></p>

<hr/>

<h3 id="toc_3">添加单例工程</h3>

<blockquote>
<p>创建完<strong><code>WorkingSpace</code></strong>之后, 我们就来添加<strong><code>SingletonPattern(单例)</code></strong>的工程</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/2.png" alt="2"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_4">创建单例类</h3>

<blockquote>
<p>现在我们来创建一个叫<strong><code>UserInfoManager</code></strong>单例类</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/4.png" alt="4"/></p>

<blockquote>
<p>声明一个类方法用于外界访问 </p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/5.png" alt="5"/></p>

<blockquote>
<p>接下来我们去实现这个类方法就好了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/6.png" alt="6"/></p>

<blockquote>
<p>看起来, 我们好像搞定了整个单例模式了, 下面让我们来试试效果.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/7.png" alt="7"/></p>

<blockquote>
<p>打印出来的效果好像是只有一个, 但实际上并不是的, 我们再来看看</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/8.png" alt="8"/></p>

<blockquote>
<p>发现这个类还是可以初始化的, 并且是另外开辟了内存空间来存储的, 这就很尴尬了, 说好的只有一个实例呢??? </p>

<p>我在这里说一句, 施主莫怕, 等贫僧跳大, 继续回到单例类当中, 添加几个判断就好了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/9.png" alt="9"/></p>

<blockquote>
<p>口说无凭, 我们来看看运行效果</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/10.png" alt="10"/></p>

<blockquote>
<p>这下子, 可以说明是只有一个实例了吧, 下面再来看看子类是否能继承</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/11.png" alt="11"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/SingletonPattern/SingletonPattern%E8%AF%B4%E6%98%8E/12.png" alt="12"/></p>

<hr/>

<blockquote>
<p>好了, 现在单例所需的</p>

<ul>
<li>易于外界访问</li>
<li>系统当中只有一个实例</li>
<li>防止子类继承</li>
</ul>

<p>我们都搞定, 酱紫我们就完成了一个单例类的创建啦</p>
</blockquote>

<hr/>

<h3 id="toc_5">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《CocoaPods》安装及使用教程]]></title>
    <link href="https://cainrun.github.io/14718487794778.html"/>
    <updated>2016-08-22T14:52:59+08:00</updated>
    <id>https://cainrun.github.io/14718487794778.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>CocoaPods</code></strong>的<strong><code>Review</code></strong>，让我知道了新版的<strong><code>CocoaPods</code></strong>和旧版的<strong><code>CocoaPods</code></strong>的区别, 在声明<strong><code>Podfile</code></strong>文件中, 需要加入对应的<strong><code>target</code></strong>才可以执行, 我个人感觉这个操作有些不太友好, 但他们要这么做, 我也没办法, 毕竟我只是小白用户而已.<br/>
<dr/><br/>
<strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注</strong><code>CocoaPods</code>** 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</font>**</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">介绍</h3>

<blockquote>
<p>在<strong><code>iOS</code></strong>项目中使用第三方类库可以说是非常常见的事，但是要正确地配置他们有时候是非常繁琐的事情，幸运的是<strong><code>CocoaPods</code></strong>是一个很好的解决方案。</p>
</blockquote>

<hr/>

<h3 id="toc_2">什么是CocoaPods</h3>

<blockquote>
<p><strong><code>CocoaPods</code></strong>是<strong><code>OS X</code></strong>和<strong><code>iOS</code></strong>下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为<strong><code>Pods</code></strong>的依赖库（这些类库必须是<strong><code>CocoaPods</code></strong>本身所支持的），并且可以轻松管理其版本。</p>

<p><strong><code>CocoaPods</code></strong>意义体现在两个方面。<br/>
* 第一，在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是<strong><code>ARC</code></strong>环境下的<strong><code>-fno-objc-arc</code></strong>配置等。</p>

<ul>
<li>第二，使用<strong><code>CocoaPods</code></strong>可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。</li>
</ul>

<p>接下来我们将介绍<strong><code>CocoaPods</code></strong>的使用。</p>
</blockquote>

<hr/>

<h3 id="toc_3">CocoaPods的核心组件</h3>

<blockquote>
<p><strong><code>CocoaPods</code></strong>是用<strong><code>Ruby</code></strong>写的，并划分成了若干个<strong><code>Gem</code></strong>包。<br/>
<dr/><br/>
<strong><code>CocoaPods</code></strong>在解析执行过程中最重要的几个包的路径分别是：<br/>
* <strong><code>CocoaPods/CocoaPods</code></strong><br/>
* <strong><code>CocoaPods/Core</code></strong><br/>
* <strong><code>CocoaPods/Xcodeproj</code></strong><br/>
<dr/><br/>
<strong><code>CocoaPods / CocoaPod</code></strong>：这是面向用户的组件，每当执行一个pod命令时，这个组件将被激活。它包括了所有实用<strong><code>CocoaPods</code></strong>的功能，并且还能调用其他<strong><code>gem</code></strong>包来执行任务。 <br/>
<dr/><br/>
<strong><code>CocoaPods / Core</code></strong>：<strong><code>Core gem</code></strong>提供了与<strong><code>CocoaPods</code></strong>相关的文件（主要是<strong><code>podfile</code></strong>和<strong><code>podspecs</code></strong>）的处理。 <br/>
<dr/><br/>
<strong><code>Podfile</code></strong>：该文件用于配置项目所需要的第三方库，它可以被高度定制。本文中我们主要在这里做动作。<br/>
<dr/><br/>
<strong><code>Podspec</code></strong>：该文件描述了一个库将怎样被添加进工程中，<strong><code>.podspec</code></strong>文件可以标识该第三方库所需要的源码文件、依赖库、编译选项，以及其他第三方库需要的配置。 <br/>
<dr/><br/>
<strong><code>CocoaPods / Xcodeproj</code></strong>：这个包负责处理工程文件，它能创建以及修改<strong><code>.xcodeproj</code></strong>文件和<strong><code>.xcworkspace</code></strong>文件。它也可以作为一个独立的包使用，当你要编写修改项目文件的脚本时，可以考虑使用<strong><code>CocoaPods/Xcodeproj</code></strong>。</p>
</blockquote>

<hr/>

<h3 id="toc_4">更换Ruby源</h3>

<blockquote>
<p>检查<strong><code>Ruby</code></strong>环境，一般来讲<strong><code>Mac OS</code></strong>都是自带<strong><code>Ruby</code></strong>环境的，在Terminal中输入命令即可查看<strong><code>Ruby</code></strong>的版本号</p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">ruby -v
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/0.png" alt="0"/></p>

<blockquote>
<p>切换<strong><code>Ruby</code></strong>源地址</p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">gem sources --remove https://rubygems.org/
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1.png" alt="1"/></p>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">#等有反应之后再敲入以下命令
gem sources -a https://ruby.taobao.org/
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2.png" alt="2"/></p>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">#为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：
gem sources -l
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_5">安装CocoaPods</h3>

<blockquote>
<p>现在我们在<strong><code>Terminal</code></strong>中输入以下命令, 输入机子的登录密码(没有密码的直接回车, 忘记密码的也别问我, 我也不知道怎么办), 等待自动完成安装就可以了</p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">sudo gem install cocoapods
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/4.png" alt="4"/></p>

<blockquote>
<p>安装完成之后就会有以下的提示</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/5.png" alt="5"/></p>

<blockquote>
<p>如果你不确定自己是否安装成功, 可以输入下面这个命令去查看</p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">pod
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/6.png" alt="6"/></p>

<blockquote>
<p>如果有以上的提示, 那就证明你是安装成功的, 如果安装不成功, 继续输入安装命令</p>
</blockquote>

<hr/>

<h3 id="toc_6">使用CocoaPods</h3>

<blockquote>
<p>创建<strong><code>Xcode</code></strong>项目(怎么创建<strong><code>Xcode</code></strong>项目这里我就不说了), 然后打开<strong><code>Terminal</code></strong>直接<strong><code>cd</code></strong>到工程的根目录中, 这里我使用一个<strong><code>Demo</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/7.png" alt="7"/></p>

<blockquote>
<p>Xcode项目中创建Podfile文件, 且编辑</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/8.png" alt="8"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/9.png" alt="9"/></p>

<blockquote>
<p>保存<strong><code>Podfile</code></strong>文件, 直接运行<strong><code>CocoaPods</code></strong>的命令, 如果该开源项目有其他项目的依赖, <strong><code>CocoaPods</code></strong>会自动下载对应的依赖项目.<br/>
PS: 里面的两端文字并不是自己写得, 是需要去<strong><code>GitHub</code></strong>里查看该项目最高支持<strong><code>iOS版本</code></strong>是多少, 以及该开源项目是第几个版本.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/10.png" alt="10"/></p>

<blockquote>
<p>由于我们的<strong><code>CocoaPods</code></strong>是第一安装, 所以会提示<strong><code>Setting up CocoaPods master repo</code></strong>, 这个时候我们只要静静的等待它初始化完, 这个等待的时间会比较长, 耐心等待吧, 骚年们~~要是想知道<strong><code>CocoaPods</code></strong>初始化多少了, 我们可以进入到<strong><code>CocoaPods</code></strong>的目录, 然后输入</p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">du -sh
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/11.png" alt="11"/></p>

<blockquote>
<p><strong><font color=red>PS: 如果中途安装失败, 重复命令即可.</font></strong></p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>初始化结束之后, 我们就可以继续捣鼓了, 但是我们发现, 出错了, 去<a href="https://cocoapods.org"><strong>CocoaPods</strong></a>官网看了一下, 原来是少添加了一个指定的<strong><code>target</code></strong>, 这个<strong><code>target</code></strong>是在哪里获取呢? 下面看图~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/12.png" alt="12"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/13.png" alt="13"/></p>

<blockquote>
<p>然后我们再次打开<strong><code>Podfile</code></strong>, 编辑它, 保存, 再次<strong><code>install</code></strong></p>
</blockquote>

<p><dr/></p>

<blockquote>
<p>vim代码</p>
</blockquote>

<pre><code class="language-vim">target &#39;CollectionViewDemo&#39; do
   pod &#39;HTHorizontalSelectionList&#39;, &#39;~&gt; 0.7.0&#39;
end
</code></pre>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/14.png" alt="14"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/15.png" alt="15"/></p>

<blockquote>
<p>OK, 成功了, 我们会看到工程里多了一些文件, 而我们再也不会运行<strong><code>.xcodeproj</code></strong>工程文件, 而是运行<strong><code>.xcworkspace</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/16.png" alt="16"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/DeveloperDocument/master/%E7%8E%A9%E8%BD%ACiOS%E5%BC%80%E5%8F%91%EF%BC%9A%E3%80%8ACocoaPods%E3%80%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/17.png" alt="17"/></p>

<blockquote>
<p>关于怎么去使用第三方的库这里我就不需要再去说了, 大家都懂的</p>
</blockquote>

<hr/>

<h3 id="toc_7">升级CocoaPods</h3>

<blockquote>
<p>先更新gem    </p>
</blockquote>

<pre><code class="language-vim">sudo gem update —system
</code></pre>

<blockquote>
<p>删除rubygems源</p>
</blockquote>

<pre><code class="language-vim">gem sources --remove https://rubygems.org/
</code></pre>

<blockquote>
<p>添加ruby淘宝源</p>
</blockquote>

<pre><code class="language-vim">gem sources -a https://ruby.taobao.org/
</code></pre>

<blockquote>
<p>测试源是否正确, 和刚开始安装时一样</p>
</blockquote>

<pre><code class="language-vim">gem sources -l
</code></pre>

<blockquote>
<p>安装CocoaPods</p>
</blockquote>

<pre><code class="language-vim">sudo gem install cocoa pods
pod setup
</code></pre>

<blockquote>
<p>查看CocoaPods版本</p>
</blockquote>

<pre><code class="language-vim">pod --version
</code></pre>

]]></content>
  </entry>
  
</feed>
