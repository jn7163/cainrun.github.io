<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cain For iOS]]></title>
  <link href="http://Cain.developer.io/atom.xml" rel="self"/>
  <link href="http://Cain.developer.io/"/>
  <updated>2016-08-22T17:39:08+08:00</updated>
  <id>http://Cain.developer.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 工厂模式》]]></title>
    <link href="http://Cain.developer.io/14718583940487.html"/>
    <updated>2016-08-22T17:33:14+08:00</updated>
    <id>http://Cain.developer.io/14718583940487.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>刚忙完就给我来一场大病, 多么痛的领悟, 好不容易好点了, 可以整理整理知识点了~</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>工厂模式</code></strong>, 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/FactoryPatternUML.jpg" alt="UML"/></p>

<blockquote>
<p>所谓<strong><code>工厂模式</code></strong>其实显示中的工厂没啥区别, 客户下单, 工厂负责做出产品出来交货, 这样子就没了, 至于工厂里面做了什么东西, 怎么实现, 我们完全不用关注, 只要知道工厂能按时交货就可以了.</p>
</blockquote>

<hr/>

<h3 id="toc_2">简单工厂与抽象工厂</h3>

<blockquote>
<p>在工厂模式当中, 又有两种不同的工厂模式, 分别是<strong><code>简单工厂</code></strong>与<strong><code>抽象工厂</code></strong>, 他们之前的区别也很简单, 无非就是一个是<strong><code>实例</code></strong>一个<strong><code>抽象</code></strong>, 这么说好像不太明确, 下面我们来建个工程, 看看<strong><code>简单工厂</code></strong>和<strong><code>抽象工厂</code></strong>两者之间到底有啥不一样~</p>
</blockquote>

<hr/>

<h3 id="toc_3">简单工厂</h3>

<blockquote>
<p>首先我们把之前的那个<strong><code>WorkSpace</code></strong>打开, 新建一个<strong><code>FactoryPattern</code></strong>工程, 然后我们再来新建一个工厂类, 这次我们就拿一个汽车工厂作为例子~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/1.png" alt="1"/></p>

<blockquote>
<p>接下来我们创建一个汽车的基类<strong><code>BaseCar</code></strong>, 还有一个协议, 这个协议是用来限制<strong><code>BaseCar</code></strong>或者<strong><code>BaseCar</code></strong>的子类实现一些必须实现的方法, 我这里只是做演示, 所以<strong><code>BaseCar</code></strong>类里面空实现就好了, 其他的交给子类去实现.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/2.png" alt="2"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/3.png" alt="3"/></p>

<blockquote>
<p>汽车的基类我们已经有了, 现在我们来建立一个汽车工厂类, 就拿全球最大的汽车厂商通用来做例子, 在这里我们会拿通用汽车的几个旗下品牌来做例子, 且都继承与<strong><code>BaseCar</code></strong>, 然后给他们对应做一些差异化的操作就OK了~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/4.png" alt="4"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/5.png" alt="5"/></p>

<blockquote>
<p>现在我们来实现<strong><code>Protocol</code></strong>里的方法再加一些差异化, 酱紫我们就知道到时候初始化出来的汽车是哪辆了~~<br/>
我们先拿<strong><code>Buick</code></strong>来做例子, 添加一个差异化方法, 然后再看看我们利用工厂模式初始化出来的对象是不是<strong><code>Buick</code></strong>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/6.png" alt="6"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/7.png" alt="7"/></p>

<blockquote>
<p>其他的几个品牌车子也是同理进行就可以了, 这里就不做演示了, 代码当中我会填上去, 到时候大家去下载源码下来看看就哦了~~</p>

<p><strong><code>简单工厂</code></strong>到这里就基本上搞定了, 下面就让我们来看看什么是<strong><code>抽象工厂</code></strong>.</p>
</blockquote>

<hr/>

<h3 id="toc_4">抽象工厂</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/AbstractFactoryUML.jpg" alt="AbstractFactoryUML"/></p>

<blockquote>
<p>其实所谓的<strong><code>抽象工厂</code></strong>与<strong><code>简单工厂</code></strong>最大的却别, 就是把工厂类做成一个抽象的对象, 比<strong><code>简单工厂</code></strong>多了一层抽象层, 然后使用一个管理者去管理这些对应的厂商, 用户可以根据自己的需求, 向不同的厂商拿货, 这就像是超市似得, 一个类别的商品有好几个或者是十几个不同的厂商在供货, 可以让消费者, 根据自己的消费水平或者需求来选择不同厂商的产品, 下面让我们用代码说话~</p>
</blockquote>

<hr/>

<h3 id="toc_5">新建抽象工厂目录</h3>

<blockquote>
<p>在开始之前, 我们肯定要先规划好文件夹的目录, 以免与之前的<strong><code>简单工厂</code></strong>类搞混, 下面就是我们的文件夹结构.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/8.png" alt="8"/></p>

<blockquote>
<p>接下来我们就要去新建我们的<strong><code>BaseFactory</code></strong>以及<strong><code>BaseCar</code></strong>, 但是这里由于之前已经有<strong><code>BaseCar</code></strong>这个类了, 为了区别, 我们在新建的<strong><code>BaseCar</code></strong>前面加个前缀<strong><code>Ab</code></strong>, 酱紫就好了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/9.png" alt="9"/></p>

<blockquote>
<p>声明且实现<strong><code>AbBaseFactory</code></strong>的一个方法.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/10.png" alt="10"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/11.png" alt="11"/></p>

<blockquote>
<p>新建完成之后, 我们就需要继续, 这次我们拿<strong><code>长安</code></strong>和<strong><code>广汽</code></strong>两个厂商做例子, 车型的话, 我就随便挑两个, 一个是<strong><code>凯美瑞</code></strong>, 一个是<strong><code>昂克赛拉</code></strong>(我是随便取的两辆车啊, 百度一搜就出来这两个货了, 要怪就怪百度去吧).</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/12.png" alt="12"/></p>

<hr/>

<h3 id="toc_6">完善对应的工厂</h3>

<blockquote>
<p>新建完这些类之后, 我们需要分别给对应的厂商添加对应的车型, <strong><code>长安-马自达</code></strong>, <strong><code>广汽-凯美瑞</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/13.png" alt="13"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/14.png" alt="14"/></p>

<hr/>

<h3 id="toc_7">工厂管理者</h3>

<blockquote>
<p>在完成了之前的工作之后, 现在我们来看看<strong><code>抽象工厂</code></strong>的核心, 工厂管理者(FactoryManager).</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/15.png" alt="15"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/16.png" alt="16"/></p>

<blockquote>
<p>酱紫, 我们就完成了<strong><code>抽象工厂</code></strong>的所有步骤了, 下面让我们来使用一下<strong><code>抽象工厂</code></strong>.</p>
</blockquote>

<hr/>

<h3 id="toc_8">使用抽象工厂</h3>

<blockquote>
<p>完成了所有步骤之后, 我们就来使用一下<strong><code>抽象工厂</code></strong>, 看看到底是不是我们所要的东西.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/DesignPattern/master/FactoryPattern/FactoryPattern%E8%AF%B4%E6%98%8E/17.png" alt="17"/></p>

<blockquote>
<p>嘿嘿, 到这里, 我们就完成了<strong><code>工厂模式</code></strong>的<strong><code>简单工厂</code></strong>和<strong><code>抽象工厂</code></strong>了, 非常的简单, 如果你们需要对应的文档和代码, 请到我的<strong><code>GitHub</code></strong>里, 地址就在下面</p>
</blockquote>

<hr/>

<h3 id="toc_9">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：iOS 8 新特性《Share Extension》]]></title>
    <link href="http://Cain.developer.io/14718547536103.html"/>
    <updated>2016-08-22T16:32:33+08:00</updated>
    <id>http://Cain.developer.io/14718547536103.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>在前阵子我写了另外一篇文章也是关于iOS 8新特性的, 叫做<strong><a href="https://github.com/CainRun/TodayExtensionExample/blob/master/README.md">玩转iOS开发：iOS 8 新特性《Today Extension》</a></strong>, 这里面讲解就是iOS 8其中一个特性, 由于工作比较忙, 所以一直在拖着, 没有继续往下研究, 现在终于有时间抽出来可以研究一下</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<code>Share Extension</code>, 祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p>什么是<strong><code>Share Extension</code></strong>? 在iOS 8的时候, 苹果开放了几个新特性, 其中一个就是<strong><code>Share Extension</code></strong>, 大家可以打开苹果自己自带的浏览器<strong><code>Safari</code></strong>, 随便选中一个网站, 点击分享, 就会出现一个分享界面, 中间的那条<strong><code>iCon</code></strong>栏目就是系统自带的<strong><code>Share Extension</code></strong>(如图所示), 说白了就是把<strong><code>Safari</code></strong>的网站地址分享出去罢了, 所以说<strong><code>Share Extension</code></strong>其实就是系统自带的社会化SDK罢了, 说那么多道理, 还不如直接上代码~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/1.jpg" alt="1 | center | 480x0"/></p>

<hr/>

<h3 id="toc_2">创建新工程</h3>

<blockquote>
<p>首先我们需要先创建一个新的工程, 由于<strong><code>Share Extension</code></strong>不是一个独立的应用, 它是需要依赖于主程序, 创建新工程的顺序我就省略了, 这里的新工程叫做<strong><code>ShareExtensionDemo</code></strong>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/2.png" alt="2 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_3">创建Share Extension</h3>

<blockquote>
<p>创建完新工程之后, 我们现在来创建<strong><code>Share Extension</code></strong>和<strong><code>Today Extension</code></strong>一样, 系统是有自带的模板给我们自己选择</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/3.png" alt="3 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/4.png" alt="4 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/5.png" alt="5 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/6.png" alt="6 | center | 1080x0"/></p>

<hr/>

<h3 id="toc_4">配置主应用</h3>

<blockquote>
<p>现在新工程和<strong><code>Share Extension</code></strong>已经创建完成, 现在我们可以在主应用当中调起<strong><code>Share Extension</code></strong>来看看效果, 这里我为了方便, 所以使用的是<strong><code>StoryBoard</code></strong>.</p>

<p>拖一个<strong><code>UIButton</code></strong>到<strong><code>StoryBoard</code></strong>, 改名为<strong><code>Share</code></strong>, 然后关联<strong><code>Action</code></strong>事件到<strong><code>ViewController</code></strong>, 添加对应的代码.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/7.png" alt="7 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/8.png" alt="8 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/9.png" alt="9 | center | 1080x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/10.png" alt="10 | center | 1080x0"/></p>

<pre><code class="language-objectivec">- (IBAction)ShareAction:(UIButton *)sender {
    
    NSString *string = @&quot;您好&quot;;
    
    UIActivityViewController *activityController = [[UIActivityViewController alloc] initWithActivityItems:@[string]
                                                                                     applicationActivities:nil];
    
    [self presentViewController:activityController
                       animated:YES
                     completion:nil];
}
</code></pre>

<blockquote>
<p>现在让我们来看看对应的效果吧~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/11.png" alt="11 | center | 480x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/12.png" alt="12 | center | 480x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/13.png" alt="13 | center | 480x0"/></p>

<blockquote>
<p>现在我们看到了<strong><code>Share Extension</code></strong>展示出来的效果, 但酱紫还是不够的, 继续继续~</p>
</blockquote>

<hr/>

<h3 id="toc_5">配置Share Extension</h3>

<blockquote>
<p>在配置<strong><code>Share Extension</code></strong>之前, 我们需要看看里面的几个方法, 不然我们完全都是蒙圈的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/14.png" alt="14 | center | 1080x0"/></p>

<pre><code class="language-objectivec">// 如果是return No, 那么发送按钮就无法点击, 如果return YES, 那么发送按钮就可以点击
- (BOOL)isContentValid {
    // Do validation of contentText and/or NSExtensionContext attachments here
    return YES;
}
</code></pre>

<pre><code class="language-objectivec">// 发送按钮的Action事件
- (void)didSelectPost {
    // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
    
    // Inform the host that we&#39;re done, so it un-blocks its UI. Note: Alternatively you could call super&#39;s -didSelectPost, which will similarly complete the extension context.
    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
}
</code></pre>

<pre><code class="language-objectivec">// 这个方法是用来返回items的一个方法, 而且返回值是数组
- (NSArray *)configurationItems {
    // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.
    return @[];
}
</code></pre>

<hr/>

<h3 id="toc_6">配置NSExtension</h3>

<blockquote>
<p>我们知道了上面那几个方法之后, 现在来配置一下我们可传送的内容规则, 这些规则分别是</p>
</blockquote>

<table>
<thead>
<tr>
<th style="text-align: center">iOS扩展插件支持媒体类型配置键</th>
<th style="text-align: center">描述</th>
<th style="text-align: center">说明</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsAttachmentsWithMaxCount</td>
<td style="text-align: center">附件最多限制: 20</td>
<td style="text-align: center">附件包括下面的File、Image和Movie三大类，单一、混选总量不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsAttachmentsWithMinCount</td>
<td style="text-align: center">附件最多限制: 上面非零时default=1</td>
<td style="text-align: center">默认至少选择1个附件，[Share Extension]中才显示扩展插件图标</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsWebURLWithMaxCount</td>
<td style="text-align: center">Web链接最多限制: default=0</td>
<td style="text-align: center">默认不支持分享超链接，例如[Safari]</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsFileWithMaxCount</td>
<td style="text-align: center">文件最多限制: 20</td>
<td style="text-align: center">单一、多选均不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsWebPageWithMaxCount</td>
<td style="text-align: center">Web页面最多限制: default=0</td>
<td style="text-align: center">默认不支持Web页面分享，例如[Safari]</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsImageWithMaxCount</td>
<td style="text-align: center">图片最多限制: 20</td>
<td style="text-align: center">单一、多选均不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsVideoWithMaxCount</td>
<td style="text-align: center">视频最多限制: 20</td>
<td style="text-align: center">单一、多选均不超过20</td>
</tr>
<tr>
<td style="text-align: center">NSExtensionActivationSupportsText</td>
<td style="text-align: center">文本类型: default=0</td>
<td style="text-align: center">默认不支持文本分享，例如[备忘录]</td>
</tr>
</tbody>
</table>

<blockquote>
<p>其实这个表格在<strong><a href="https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html">官网文档</a></strong>都是可以找到的~~</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/15.png" alt="15 | center | 1080x0"/></p>

<hr/>

<h1 id="toc_7"><center>Share Extension逻辑</center></h1>

<h3 id="toc_8">填写限制字数长度的逻辑</h3>

<blockquote>
<p>首先我们来填写一个东东, 就是限制<strong><code>Share Extension</code></strong>的可输入字数长度, 然后添加一个分享路径</p>

<p>这里特别需要强调一点哈, 因为<strong><a href="http://requestb.in/1hx20w61">http://requestb.in/1hx20w61</a></strong>这个链接是需要自己去手动申请的, 而且是居然时效性的, 如果失效了, 那就自己去<strong><a href="http://requestb.in">http://requestb.in</a></strong>再申请一个就好了.</p>
</blockquote>

<pre><code class="language-objectivec">// 限制字数, 最多只能输入40个
static NSInteger const maxCharactersAllowed = 40;
// 这是一个测试连接, 并不是固定的, 你可以去http://requestb.in申请, 然后替换到你最新申请的连接即可
static NSString *uploadURL = @&quot;http://requestb.in/1hx20w61&quot;;
</code></pre>

<blockquote>
<p>声明完了字数长度, 我们需要去<strong><code>- (BOOL)isContentValid</code></strong>方法中实现</p>
</blockquote>

<pre><code class="language-objectivec">- (BOOL)isContentValid {
    
    NSInteger length = self.contentText.length;
    
    self.charactersRemaining = @(maxCharactersAllowed - length);
    
    return self.charactersRemaining.integerValue &lt; 0 ? NO : YES;
}
</code></pre>

<hr/>

<h3 id="toc_9">填写上传信息的逻辑</h3>

<blockquote>
<p>在这里我用原生的网络请求进行请求发送, 大家也可以去使用<strong><a href="https://github.com/AFNetworking/AFNetworking">AFNetWorking</a></strong>, Swift的话可以去使用另外一个网络请求框架<strong><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></strong>, 作者都是同一个大神</p>

<p>在写逻辑之前, 我们需要打开App的一个Group功能, 并且填写对应的参数, 不然没法传送数据.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/16.png" alt="16 | center | 1080x0"/><br/>
<img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/17.png" alt="17 | center | 1080x0"/></p>

<blockquote>
<p>同样的, <strong><code>Share Extension</code></strong>也需要同样的操作, 这里就不做重复的操作了, 现在我们继续来填写对应的网络操作逻辑</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/18.png" alt="18 | center | 1080x0"/></p>

<blockquote>
<p>首先, 我们需要封装一个返回<strong><code>NSURLRequest</code></strong>的方法</p>
</blockquote>

<pre><code class="language-objectivec">/**
 *  返回一个NSURLRequest方法, 需要传入一个NSString对象
 *
 *  @param string 需要发送出去的字符串
 *
 *  @return NSURLRequest
 */
- (NSURLRequest *)urlRequestWithString:(NSString *)string {
    
    NSURL *url = [NSURL URLWithString:uploadURL];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    
    [request addValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];
    [request addValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];
    
    request.HTTPMethod = @&quot;POST&quot;;
    
    NSMutableDictionary *jsonObject = [NSMutableDictionary dictionary];
    
    jsonObject[@&quot;text&quot;] = string;
    
    NSError *jsonError;
    NSData *jsonData;
    
    jsonData = [NSJSONSerialization dataWithJSONObject:jsonObject options:NSJSONWritingPrettyPrinted error:&amp;jsonError];
    
    if (jsonData) {
        
        request.HTTPBody = jsonData;
    } else {
        
        NSLog(@&quot;JSON Error: %@&quot;, jsonError.localizedDescription);
    }
    
    return request;
}
</code></pre>

<blockquote>
<p>然后在<strong><code>- (void)didSelectPost</code></strong>点击事件中去调用</p>
</blockquote>

<pre><code class="language-objectivec">- (void)didSelectPost {

    NSString *configName = @&quot;com.shareExtension.ShareExtensionDemo.BackgroundSessionConfig&quot;;

    NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:configName];
    
    sessionConfig.sharedContainerIdentifier = @&quot;group.ShareExtension&quot;;
    
    NSURLSession *session = [NSURLSession sessionWithConfiguration:sessionConfig];
    
    NSURLRequest *urlRequest = [self urlRequestWithString:self.contentText];
    
    NSURLSessionTask *task = [session dataTaskWithRequest:urlRequest];
    
    [task resume];
    
    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
}
</code></pre>

<blockquote>
<p>这样子就完事了, 由于我这里不知道为啥用模拟器一直没法进行网络请求, 只能用真机测试了, 不知道是不是我配置的问题, 如果有知道的大神麻烦请告知一声, 谢谢啦~~现在我们再来重复一下刚开始的操作, 发送请求到指定的<strong><code>URL</code></strong>里去.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/19.png" alt="19 | center | 480x0"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/ShareExtensionDemo/master/images-folder/20.png" alt="20 | center | 1080x0"/></p>

<blockquote>
<p>酱紫我们就搞定了<strong><code>Share Extension</code></strong>, 灰常的简单</p>
</blockquote>

<hr/>

<h3 id="toc_10">自定义UI</h3>

<blockquote>
<p>这里补充一点, 其实<strong><code>Share Extension</code></strong>说白了就是一个<strong><code>UIViewController</code></strong>, 所以你可以根据你的喜好来进行UI定制, 详细资料大家可以去苹果官网或者<strong><code>Google</code></strong>搜搜, 百度的话, 你们懂得</p>
</blockquote>

<hr/>

<h3 id="toc_11">补充篇文章</h3>

<blockquote>
<p>这里再补充篇文章, 关于Share Extension的, 是用Swift写的, 里面有一些问题, 会导致<strong><code>NSURLRequest</code></strong>返回为<strong><code>nil</code></strong>, 大家单步调试一下就知道为什么了</p>
</blockquote>

<p><a href="http://letsswift.com/2014/09/ios8-day-by-day-day2/">iOS8 Day-by-Day– Day2 — 分享应用扩展</a></p>

<hr/>

<h3 id="toc_12">GitHub地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/ShareExtensionDemo">https://github.com/CainRun/ShareExtensionDemo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：iOS 8 新特性《Today Extension》]]></title>
    <link href="http://Cain.developer.io/14718509058148.html"/>
    <updated>2016-08-22T15:28:25+08:00</updated>
    <id>http://Cain.developer.io/14718509058148.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>Today Extension</code></strong>预研，让我觉得自己还有很多的不足，因为还有很多东西都没有去仔细的去研究，以后接下来会继续再接再厉。</p>

<p><strong><font color=purple>最后:</font></strong><br/>
<strong><font color=purple>如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<code>Today Extension</code>, 祝大家学习愉快~谢谢~</font></strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<blockquote>
<p><strong><code>Today Extension</code></strong>是在<strong><code>iOS 8</code></strong>之后所推出来的重大更新之一，在此之前， 或许有人看过部分<strong><code>App</code></strong>就已经实现过这些功能，但那种实现方式是并不是系统所提供的，所以在性能方面需要打个问号。</p>
</blockquote>

<hr/>

<h3 id="toc_2">创建Today Extension</h3>

<blockquote>
<p>开始创建Today Extension</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/0.png" alt="0"/></p>

<blockquote>
<p>选择<strong><code>Today Extension</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/1.png" alt="1"/></p>

<blockquote>
<p>激活<strong><code>Today Extension</code></strong></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/2.png" alt="2"/></p>

<hr/>

<h3 id="toc_3">使用Storyboard实现Today Extension</h3>

<blockquote>
<p>在创建好<strong><code>Today Extension</code></strong>时，<strong><code>Xcode</code></strong>会自动创建一个对应的<strong><code>MainInterface.storyboard</code></strong>文件，并且与<strong><code>Today Extension</code></strong>的<strong><code>Controller</code></strong>关联，打开<strong><code>MainInterface.storyboard</code></strong>, 我们会看到有一个内容为<strong><code>Hello World</code></strong>的<strong><code>UILabel</code></strong>，废话少说现在我们来看看运行效果。</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/3.png" alt="3"/></p>

<blockquote>
<p>选择你需要关联启动的App</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/4.png" alt="4"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/5.png" alt="5"/></p>

<blockquote>
<p>不要怀疑，就是这么简单的，<strong><code>Today Extension</code></strong>就这么出来了。</p>
</blockquote>

<hr/>

<h3 id="toc_4">打开数据共享服务</h3>

<blockquote>
<p>不过，骚年郎们别着急，只是展示个<strong><code>Hello World</code></strong>而已，别高兴得太早，接下来我们讲重头戏，也就是应用<strong><code>App</code></strong>与<strong><code>Today Extension</code></strong>的数据交互，在此之前， 我们需要打开两个服务。</p>

<p>首先是主程序里的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/6.png" alt="6"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/7.png" alt="7"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/8.png" alt="8"/></p>

<blockquote>
<p>再者呢，就是<strong><code>Today Extension</code></strong>里的</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/9.png" alt="9"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/10.png" alt="10"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/11.png" alt="11"/></p>

<blockquote>
<p>做完这两个操作之后，我们会看到多出来的两个<strong><code>证书</code></strong>。</p>

<p>PS：<font color=red><strong>这个证书是收费的， 如果没有去申请，一个账号可以免费测试10个证书，主应用1个，Today Extension插件1个，也就是说一个应用需要两个。</strong></font></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/12.png" alt="12"/></p>

<hr/>

<h3 id="toc_5">删掉Storyboard</h3>

<blockquote>
<p>接下来之前，我们要把<strong><code>MainInterface.storyboard</code></strong>给干掉，毕竟代码才是王道（个人观点，不喜勿喷）如果喜欢用<strong><code>Storyboard</code></strong>的朋友，也有一个<a href="https://github.com/CainRun/TodayExtensionExample/tree/master/TodayExtension-Storyboard">Storyboard</a>版本的，后面再补上，废话就不多说了，上教程。</p>

<p>找到<strong><code>TodayI Extension</code></strong>中的<strong><code>Info.plist</code></strong>文件，看到这小样就在这，先留着先</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/13.png" alt="13"/></p>

<blockquote>
<p>手动添加<strong><code>NSExtensionPrincipalClass</code></strong>字段 并设为<strong><code>TodayViewController</code></strong>（这个<strong><code>Controller</code></strong>你可以自己指定，我这里为了方便，就直接拿<strong><code>Xcode</code></strong>生成的）</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/14.png" alt="14"/></p>

<blockquote>
<p>现在我们可以把<strong><code>storyboard</code></strong>这小样给删掉了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/15.png" alt="15"/></p>

<blockquote>
<p>再运行，你就会看到整个<strong><code>Today Extension</code></strong>是空的了，只有一个空图标和一个标题。</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/16.png" alt="16"/></p>

<hr/>

<h3 id="toc_6">代码实现</h3>

<blockquote>
<p>主应用中，我们需要设置一下<strong><code>NSUserDefault</code></strong></p>
</blockquote>

<pre><code class="language-objectivec">- (void)viewDidLoad {
    [super viewDidLoad];
    
    NSUserDefaults *userDefault = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.todayExtensionCodeExample&quot;];
    [userDefault setObject:@&quot;tips&quot; forKey:@&quot;group.todayExtensionCodeExample.tips&quot;];
}

</code></pre>

<blockquote>
<p>现在我们进入<strong><code>TodayViewController</code></strong>开始写代码了</p>
</blockquote>

<pre><code class="language-objective-c">interface TodayViewController () &lt;NCWidgetProviding&gt;

@property (nonatomic, strong) UIView *contentView;
@property (nonatomic, strong) UILabel *tipsLabel;

@end

@implementation TodayViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    /**
     *  设置Today Extension的Size
     *
     *  @param 0   Today Extension的宽度是不可变的，所以这里随便给个0就好了
     *  @param 150 高度是可控制的，这里我给了一个固定值150
     *
     *  @return CGSize
     */
    self.preferredContentSize = CGSizeMake(0, 150);
    
    /**
     *  初始化一个UIView，且设置它的属性
     */
    self.contentView = [[UIView alloc] initWithFrame:CGRectMake(0,
                                                                0,
                                                                self.view.frame.size.width,
                                                                self.view.frame.size.height)];
    self.contentView.backgroundColor = [UIColor whiteColor];
    
    [self.view addSubview:self.contentView];

    /**
     *  初始化一个Label，并且设置它的属性
     *
     */
    self.tipsLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 50, self.view.frame.size.width, 30)];
    
    self.tipsLabel.text            = @&quot;这是一个测试代码&quot;;
    self.tipsLabel.numberOfLines   = 0;
    self.tipsLabel.textColor       = [UIColor blackColor];
    self.tipsLabel.backgroundColor = [UIColor redColor];

    [self.view addSubview:self.tipsLabel];
    
    /**
     *  获取主应用传过来的数据
     */
    NSUserDefaults *userDefault = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.todayExtensionCodeExample&quot;];
    
    NSString *nickName = [userDefault objectForKey:@&quot;group.todayExtensionCodeExample.tips&quot;];
    
    if (nickName) {
        
        NSString *message = @&quot;今天XX又给你准备了很多惊喜哦，快去看看吧！&quot;;
        
        self.tipsLabel.text = [NSString stringWithFormat:@&quot;%@,%@&quot;, nickName, message];
    }
}

/**
 *  该方法是用来设置Today Extension的偏移，默认会像左偏移
 *
 *  @param defaultMarginInsets UIEdgeInsets
 *
 *  @return UIEdgeInsets
 */
- (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets {
    
    return UIEdgeInsetsZero;
}

/**
 *  该方法是用来刷新Today Extension数据的
 *
 *  @param completionHandler
 */
- (void)widgetPerformUpdateWithCompletionHandler:(void (^)(NCUpdateResult))completionHandler {
    // Perform any setup necessary in order to update the view.
    
    // If an error is encountered, use NCUpdateResultFailed
    // If there&#39;s no update required, use NCUpdateResultNoData
    // If there&#39;s an update, use NCUpdateResultNewData

    completionHandler(NCUpdateResultNewData);
}

@end
</code></pre>

<hr/>

<h3 id="toc_7">从Today Extension跳转至App</h3>

<blockquote>
<p>首先，我们需要添加<strong><code>Identifier</code></strong>，以及<strong><code>URL Schemes</code></strong>。</p>

<p><font color=purple><strong>PS：这里的</strong><code>Identifier</code><strong>和</strong><code>URL Schemes</code><strong>是你自己定义的，不能与其他</strong><code>Application</code><strong>的</strong><code>Identifier</code><strong>、</strong><code>URL Schemes</code><strong>相同，否则会造成冲突。</strong></font></p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/17.png" alt="17"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/18.png" alt="18"/></p>

<blockquote>
<p>然后呢，我们去到主应用的<strong><code>AppDelegate.m</code></strong>文件中添加方法</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/19.png" alt="19"/></p>

<blockquote>
<p>最后，我们去到<strong><code>TodayViewController</code></strong>里补上对应的方法就好了</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/20.png" alt="20"/></p>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/21.png" alt="21"/></p>

<hr/>

<h3 id="toc_8">最终效果</h3>

<p><img src="https://raw.githubusercontent.com/CainRun/TodayExtensionExample/master/images-folder/22.png" alt="22"/></p>

<hr/>

<h3 id="toc_9">注意点</h3>

<p><strong>PS：在保证代码正确的前提下，如果遇到</strong><code>Today Extension</code><strong>无法加载数据，或者其他异常，可以把</strong><code>Application</code><strong>删掉，插件也删掉，</strong><code>Clear</code><strong>一下</strong><code>Project</code><strong>，在运行即可。</strong></p>

<hr/>

<h3 id="toc_10">补上几篇文章</h3>

<p><a href="http://www.jianshu.com/p/ab268a1ae000">iOS 8 Extension之Today插件</a></p>

<p><a href="https://onevcat.com/2014/08/notification-today-widget/">WWDC 2014 Session笔记 - iOS 通知中心扩展制作入门</a></p>

<p><a href="http://adad184.com/2014/10/29/how-to-setup-today-extension-programmatically/">如何用纯代码构建一个Widget(today extension)</a></p>

<hr/>

<h3 id="toc_11">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/TodayExtensionExample">https://github.com/CainRun/TodayExtensionExample</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 代理模式》]]></title>
    <link href="http://Cain.developer.io/14718501007074.html"/>
    <updated>2016-08-22T15:15:00+08:00</updated>
    <id>http://Cain.developer.io/14718501007074.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>上次我们知道了单例模式是怎么回事, 现在我们来探讨一下什么叫做<strong><code>代理模式</code></strong>.</p>

<p>其实所谓的代理模式在我们日常生活中非常的常见, 比如买车, 各式各样的牌子都有, 但这些汽车生产商又不可能自己掏钱在每个城市的每个角落都开一家自己的直营店, 所以他们会去招一些第三方的代理商进行分销, 而这个就是我们今天所要说的<strong><code>代理模式</code></strong>.</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>代理模式</code></strong>, 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<p><img src="media/14718501007074/ProxyPatternUML.png" alt="ProxyPatternUM"/></p>

<blockquote>
<p>这是一张<strong><code>代理模式</code></strong>的UML图, 同样也很简单的讲解了<strong><code>代理模式</code></strong>到底是怎么回事</p>

<p>顺序如下: <br/>
- 1.<strong><code>Client(客户)</code></strong>向<strong><code>Subject(代理店)</code></strong>发起购买汽车的请求<br/>
- 2.<strong><code>Subject(代理店)</code></strong>会向<strong><code>Proxy(生产商)</code></strong>进行提单<br/>
- 3.<strong><code>Proxy(生产商)</code></strong>按照提单进行交货给<strong><code>Subject(代理店)</code></strong><br/>
- 4.<strong><code>Subject(代理点)</code></strong>再交付给<strong><code>Client(客户)</code></strong>, </p>
</blockquote>

<hr/>

<h3 id="toc_2">创建工程</h3>

<blockquote>
<p>打开我们自己创建的<strong><code>DesignPatternWork</code></strong>文件夹, 里面有我们之前所创建的<strong><code>DesignPatternWorkSpace</code></strong></p>
</blockquote>

<p><img src="media/14718501007074/1.png" alt="1"/></p>

<blockquote>
<p>添加我们所要创建的新工程, 命名为<strong><code>ProxyPattern</code></strong></p>
</blockquote>

<p><img src="media/14718501007074/2.png" alt="2"/></p>

<p><img src="media/14718501007074/3.png" alt="3"/></p>

<hr/>

<h2 id="toc_3"><center>创建代理类</center></h2>

<h3 id="toc_4">声明代理类</h3>

<blockquote>
<p>这里我们就拿奥迪这个汽车生产商来进行演示, 原谅我是个奥迪控~~</p>
</blockquote>

<p><img src="media/14718501007074/4.png" alt="4"/></p>

<hr/>

<h3 id="toc_5">声明代理方法</h3>

<blockquote>
<p>在这里声明两个代理方法, 但他们有所区别, 一个是必须实现, 一个是可选类型的, 由于方法名自注释, 我这里就不添加注释了.</p>
</blockquote>

<pre><code class="language-objectivec">@required
- (void)audiManufacturer:(AudiManufacturer *)audiManufacturer
           orderQuantity:(NSInteger)orderQuantity;
</code></pre>

<pre><code class="language-objectivec">@optional
- (void)audiManufacturer:(AudiManufacturer *)audiManufacturer
            audiDelegateInfo:(NSString *)audiDelegateInfo;
</code></pre>

<blockquote>
<p>解释一下, 为什么我们需要在代理方法中提供代理类, 其实这个很好理解, 打个比方, 就拿奥迪来说吧, 一个品牌的车子, 肯定有不同的型号, 而每个型号不一定都是在同一家工厂里生产的, 这个时候我们就需要区分生产地, 所以我们为了提供外部去区分, 就需要在代理方法中提供代理类<strong><code>(个人理解, 不是官方语言哈)</code></strong>.</p>
</blockquote>

<p><img src="media/14718501007074/5.png" alt="5"/></p>

<hr/>

<h3 id="toc_6">内部实现代理方法</h3>

<blockquote>
<p>在内部实现两个对方开放的方法</p>
</blockquote>

<pre><code class="language-objectivec">- (void)buyCarCount:(NSInteger)count;
- (void)buyCarModel:(NSString *)model;
</code></pre>

<p><img src="media/14718501007074/6.png" alt="6"/></p>

<hr/>

<h3 id="toc_7">外部调用代理</h3>

<blockquote>
<p>代理类以及代理方法我们已经完成了, 接下来我们就要在外部去实现了</p>
</blockquote>

<p><img src="media/14718501007074/7.png" alt="7"/></p>

<p><img src="media/14718501007074/8.png" alt="8"/></p>

<hr/>

<h2 id="toc_8"><center>代理与协议的区别</center></h2>

<h3 id="toc_9">代理与协议</h3>

<blockquote>
<p>到这里, 我们已经完成了整个代理模式的所有要求了, 但还有一些小细节需要提提.</p>

<p><strong><code>代理职能:</code></strong>降低对象与对象之间的耦合度<br/>
 <strong><code>协议职能:</code></strong>主要是用来约束对象或筛选对象<br/>
 <strong><code>代理与协议的相似:</code></strong>代理与协议都是使用<strong><code>@protocol</code></strong>来进行声明, 并且提供方法的一种模式, 看起来没啥不一样.<br/>
 <strong><code>代理与协议的不同:</code></strong>其实就如同它们的职能所说, <strong><code>代理</code></strong>是为了降低对象与对象之间的耦合度, <strong><code>协议</code></strong>是用来约束对象或筛选对象</p>
</blockquote>

<hr/>

<h3 id="toc_10">创建协议</h3>

<blockquote>
<p>这里我们用代码演示一下吧, 这样子更加的简单明了, 不过这里要注意一下, <strong><code>Protocol</code></strong>是没有<strong><code>.m</code></strong>文件的</p>
</blockquote>

<p><img src="media/14718501007074/9.png" alt="9"/></p>

<hr/>

<h3 id="toc_11">创建顾客类</h3>

<blockquote>
<p>创建完协议就要创建顾客了, 并且这个顾客类是必须遵守我们创建的<strong><code>Protocol</code></strong>, 然后在这个<strong><code>Protocol</code></strong>里加个判断.</p>
</blockquote>

<p><img src="media/14718501007074/10.png" alt="10"/></p>

<p><img src="media/14718501007074/11.png" alt="11"/></p>

<blockquote>
<p>现在我们来初始化一下这个顾客类, 并且校验一下我们所写的<strong><code>Protocol</code></strong>是否生效.</p>
</blockquote>

<p><img src="media/14718501007074/12.png" alt="12"/></p>

<blockquote>
<p>先输入<strong><code>10000</code></strong></p>
</blockquote>

<p><img src="media/14718501007074/13.png" alt="13"/></p>

<blockquote>
<p>再输入<strong><code>1000000</code></strong></p>
</blockquote>

<p><img src="media/14718501007074/14.png" alt="14"/></p>

<hr/>

<h3 id="toc_12">补充一点</h3>

<blockquote>
<p>其实在iOS中, 就有一个类叫做<strong><code>NSProxy</code></strong>, 它也可以用来实现<strong><code>代理模式</code></strong>, 但在这里先不做介绍, 后面有时间再另外写一篇文章去讲解怎么用<strong><code>NSProxy</code></strong>去实现代理模式, 如果有好奇心特别重的朋友, 也可以自行去翻查一下资料~</p>
</blockquote>

<hr/>

<h3 id="toc_13">最后总结</h3>

<blockquote>
<p>经过上面的演示, 就知道<strong><code>代理模式</code></strong>并没有想象中那么复杂, 说白了, 所谓的<strong><code>代理模式</code></strong>就是为了降低对象与对象之间的耦合度, 为了方便维护罢了, 同时我们也知道了<strong><code>代理</code></strong>与<strong><code>协议</code></strong>之间的区别, 这篇文章就到了, 谢谢大家的观看~</p>
</blockquote>

<hr/>

<h3 id="toc_14">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《iOS设计模式 — 单例模式》]]></title>
    <link href="http://Cain.developer.io/14718491333111.html"/>
    <updated>2016-08-22T14:58:53+08:00</updated>
    <id>http://Cain.developer.io/14718491333111.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>有一段时间没有发简书了, 刚好现在忙完项目的需求, 现在可以闲下来写写简书, 顺便自己给自己复习巩固一下知识, 不过我在这里又要吐槽一句, 项目中遇到了一个单例的问题, 让我感到非常的蛋疼, 写这个单例的人只是单纯了为了写单例而写单例, 没有想到会发生什么, 现在让我们一起来看看什么叫单例吧.</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>单例模式</code></strong> 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">简介</h3>

<p><img src="media/14718491333111/SingletonUML.jpg" alt="SingletonUM"/></p>

<blockquote>
<p>这是一张单例的<strong><code>UML</code></strong>图, 非常简单明了的讲解单例类到底是怎么回事, 通常单例是用来作为管理中心, 或者是通知中心, 比如在<strong><code>iOS</code></strong>当中的<strong><code>NSNotificationCenter</code></strong>, <strong><code>[[UIApplication sharedApplication] statusBarStyle]</code></strong>, <strong><code>NSUserDefaults</code></strong>, <strong><code>[NSFileManager defaultManager]</code></strong>等等都是单例, 单例类有几个特征.</p>

<ul>
<li>系统当中只有一个实例</li>
<li>易于外界访问</li>
<li>防止子类继承</li>
<li>共享信息</li>
</ul>
</blockquote>

<hr/>

<h3 id="toc_2">准备工作</h3>

<blockquote>
<p>首先, 我们先来建一个<strong><code>WorkSpace</code></strong>, 这样子方便我们以后多添加工程, 因为单例模式只是我们的开始.</p>
</blockquote>

<p><img src="media/14718491333111/1.png" alt="1"/></p>

<hr/>

<h3 id="toc_3">添加单例工程</h3>

<blockquote>
<p>创建完<strong><code>WorkingSpace</code></strong>之后, 我们就来添加<strong><code>SingletonPattern(单例)</code></strong>的工程</p>
</blockquote>

<p><img src="media/14718491333111/2.png" alt="2"/></p>

<p><img src="media/14718491333111/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_4">创建单例类</h3>

<blockquote>
<p>现在我们来创建一个叫<strong><code>UserInfoManager</code></strong>单例类</p>
</blockquote>

<p><img src="media/14718491333111/4.png" alt="4"/></p>

<blockquote>
<p>声明一个类方法用于外界访问 </p>
</blockquote>

<p><img src="media/14718491333111/5.png" alt="5"/></p>

<blockquote>
<p>接下来我们去实现这个类方法就好了</p>
</blockquote>

<p><img src="media/14718491333111/6.png" alt="6"/></p>

<blockquote>
<p>看起来, 我们好像搞定了整个单例模式了, 下面让我们来试试效果.</p>
</blockquote>

<p><img src="media/14718491333111/7.png" alt="7"/></p>

<blockquote>
<p>打印出来的效果好像是只有一个, 但实际上并不是的, 我们再来看看</p>
</blockquote>

<p><img src="media/14718491333111/8.png" alt="8"/></p>

<blockquote>
<p>发现这个类还是可以初始化的, 并且是另外开辟了内存空间来存储的, 这就很尴尬了, 说好的只有一个实例呢??? </p>

<p>我在这里说一句, 施主莫怕, 等贫僧跳大, 继续回到单例类当中, 添加几个判断就好了</p>
</blockquote>

<p><img src="media/14718491333111/9.png" alt="9"/></p>

<blockquote>
<p>口说无凭, 我们来看看运行效果</p>
</blockquote>

<p><img src="media/14718491333111/10.png" alt="10"/></p>

<blockquote>
<p>这下子, 可以说明是只有一个实例了吧, 下面再来看看子类是否能继承</p>
</blockquote>

<p><img src="media/14718491333111/11.png" alt="11"/></p>

<p><img src="media/14718491333111/12.png" alt="12"/></p>

<hr/>

<blockquote>
<p>好了, 现在单例所需的</p>

<ul>
<li>易于外界访问</li>
<li>系统当中只有一个实例</li>
<li>防止子类继承</li>
</ul>

<p>我们都搞定, 酱紫我们就完成了一个单例类的创建啦</p>
</blockquote>

<hr/>

<h3 id="toc_5">工程地址</h3>

<p>项目地址: <a href="https://github.com/CainRun/DesignPattern">https://github.com/CainRun/DesignPattern</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：《CocoaPods》安装及使用教程]]></title>
    <link href="http://Cain.developer.io/14718487794778.html"/>
    <updated>2016-08-22T14:52:59+08:00</updated>
    <id>http://Cain.developer.io/14718487794778.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>CocoaPods</code></strong>的<strong><code>Review</code></strong>，让我知道了新版的<strong><code>CocoaPods</code></strong>和旧版的<strong><code>CocoaPods</code></strong>的区别, 在声明<strong><code>Podfile</code></strong>文件中, 需要加入对应的<strong><code>target</code></strong>才可以执行, 我个人感觉这个操作有些不太友好, 但他们要这么做, 我也没办法, 毕竟我只是小白用户而已.</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>CocoaPods</code></strong> 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">介绍</h3>

<blockquote>
<p>在<strong><code>iOS</code></strong>项目中使用第三方类库可以说是非常常见的事，但是要正确地配置他们有时候是非常繁琐的事情，幸运的是<strong><code>CocoaPods</code></strong>是一个很好的解决方案。</p>
</blockquote>

<hr/>

<h3 id="toc_2">什么是CocoaPods</h3>

<blockquote>
<p><strong><code>CocoaPods</code></strong>是<strong><code>OS X</code></strong>和<strong><code>iOS</code></strong>下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为<strong><code>Pods</code></strong>的依赖库（这些类库必须是<strong><code>CocoaPods</code></strong>本身所支持的），并且可以轻松管理其版本。</p>

<p><strong><code>CocoaPods</code></strong>意义体现在两个方面。<br/>
* 第一，在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是<strong><code>ARC</code></strong>环境下的<strong><code>-fno-objc-arc</code></strong>配置等。</p>

<ul>
<li>第二，使用<strong><code>CocoaPods</code></strong>可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。</li>
</ul>

<p>接下来我们将介绍<strong><code>CocoaPods</code></strong>的使用。</p>
</blockquote>

<hr/>

<h3 id="toc_3">CocoaPods的核心组件</h3>

<blockquote>
<p><strong><code>CocoaPods</code></strong>是用<strong><code>Ruby</code></strong>写的，并划分成了若干个<strong><code>Gem</code></strong>包。</p>

<p><strong><code>CocoaPods</code></strong>在解析执行过程中最重要的几个包的路径分别是：<br/>
* <strong><code>CocoaPods/CocoaPods</code></strong><br/>
* <strong><code>CocoaPods/Core</code></strong><br/>
* <strong><code>CocoaPods/Xcodeproj</code></strong></p>

<p><strong><code>CocoaPods / CocoaPod</code></strong>：这是面向用户的组件，每当执行一个pod命令时，这个组件将被激活。它包括了所有实用<strong><code>CocoaPods</code></strong>的功能，并且还能调用其他<strong><code>gem</code></strong>包来执行任务。 </p>

<p><strong><code>CocoaPods / Core</code></strong>：<strong><code>Core gem</code></strong>提供了与<strong><code>CocoaPods</code></strong>相关的文件（主要是<strong><code>podfile</code></strong>和<strong><code>podspecs</code></strong>）的处理。 </p>

<p><strong><code>Podfile</code></strong>：该文件用于配置项目所需要的第三方库，它可以被高度定制。本文中我们主要在这里做动作。</p>

<p><strong><code>Podspec</code></strong>：该文件描述了一个库将怎样被添加进工程中，<strong><code>.podspec</code></strong>文件可以标识该第三方库所需要的源码文件、依赖库、编译选项，以及其他第三方库需要的配置。 </p>

<p><strong><code>CocoaPods / Xcodeproj</code></strong>：这个包负责处理工程文件，它能创建以及修改<strong><code>.xcodeproj</code></strong>文件和<strong><code>.xcworkspace</code></strong>文件。它也可以作为一个独立的包使用，当你要编写修改项目文件的脚本时，可以考虑使用<strong><code>CocoaPods/Xcodeproj</code></strong>。</p>
</blockquote>

<hr/>

<h3 id="toc_4">更换Ruby源</h3>

<blockquote>
<p>检查<strong><code>Ruby</code></strong>环境，一般来讲<strong><code>Mac OS</code></strong>都是自带<strong><code>Ruby</code></strong>环境的，在Terminal中输入命令即可查看<strong><code>Ruby</code></strong>的版本号</p>
</blockquote>

<pre><code class="language-vim">ruby -v
</code></pre>

<p><img src="media/14718487794778/0.png" alt="0"/></p>

<blockquote>
<p>切换<strong><code>Ruby</code></strong>源地址</p>
</blockquote>

<pre><code class="language-vim">gem sources --remove https://rubygems.org/
</code></pre>

<p><img src="media/14718487794778/1.png" alt="1"/></p>

<pre><code class="language-vim">#等有反应之后再敲入以下命令
gem sources -a https://ruby.taobao.org/
</code></pre>

<p><img src="media/14718487794778/2.png" alt="2"/></p>

<pre><code class="language-vim">#为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：
gem sources -l
</code></pre>

<p><img src="media/14718487794778/3.png" alt="3"/></p>

<hr/>

<h3 id="toc_5">安装CocoaPods</h3>

<blockquote>
<p>现在我们在<strong><code>Terminal</code></strong>中输入以下命令, 输入机子的登录密码(没有密码的直接回车, 忘记密码的也别问我, 我也不知道怎么办), 等待自动完成安装就可以了</p>
</blockquote>

<pre><code class="language-vim">sudo gem install cocoapods
</code></pre>

<p><img src="media/14718487794778/4.png" alt="4"/></p>

<blockquote>
<p>安装完成之后就会有以下的提示</p>
</blockquote>

<p><img src="media/14718487794778/5.png" alt="5"/></p>

<blockquote>
<p>如果你不确定自己是否安装成功, 可以输入下面这个命令去查看</p>
</blockquote>

<pre><code class="language-vim">pod
</code></pre>

<p><img src="media/14718487794778/6.png" alt="6"/></p>

<blockquote>
<p>如果有以上的提示, 那就证明你是安装成功的, 如果安装不成功, 继续输入安装命令</p>
</blockquote>

<hr/>

<h3 id="toc_6">使用CocoaPods</h3>

<blockquote>
<p>创建<strong><code>Xcode</code></strong>项目(怎么创建<strong><code>Xcode</code></strong>项目这里我就不说了), 然后打开<strong><code>Terminal</code></strong>直接<strong><code>cd</code></strong>到工程的根目录中, 这里我使用一个<strong><code>Demo</code></strong></p>
</blockquote>

<p><img src="media/14718487794778/7.png" alt="7"/></p>

<blockquote>
<p>Xcode项目中创建Podfile文件, 且编辑</p>
</blockquote>

<p><img src="media/14718487794778/8.png" alt="8"/></p>

<p><img src="media/14718487794778/9.png" alt="9"/></p>

<blockquote>
<p>保存<strong><code>Podfile</code></strong>文件, 直接运行<strong><code>CocoaPods</code></strong>的命令, 如果该开源项目有其他项目的依赖, <strong><code>CocoaPods</code></strong>会自动下载对应的依赖项目.<br/>
PS: 里面的两端文字并不是自己写得, 是需要去<strong><code>GitHub</code></strong>里查看该项目最高支持<strong><code>iOS版本</code></strong>是多少, 以及该开源项目是第几个版本.</p>
</blockquote>

<p><img src="media/14718487794778/10.png" alt="10"/></p>

<blockquote>
<p>由于我们的<strong><code>CocoaPods</code></strong>是第一安装, 所以会提示<strong><code>Setting up CocoaPods master repo</code></strong>, 这个时候我们只要静静的等待它初始化完, 这个等待的时间会比较长, 耐心等待吧, 骚年们~~要是想知道<strong><code>CocoaPods</code></strong>初始化多少了, 我们可以进入到<strong><code>CocoaPods</code></strong>的目录, 然后输入</p>
</blockquote>

<pre><code class="language-vim">du -sh
</code></pre>

<p><img src="media/14718487794778/11.png" alt="11"/></p>

<blockquote>
<p><strong><font color=red>PS: 如果中途安装失败, 重复命令即可.</font></strong></p>
</blockquote>

<p><dr></p>

<blockquote>
<p>初始化结束之后, 我们就可以继续捣鼓了, 但是我们发现, 出错了, 去<a href="https://cocoapods.org"><strong>CocoaPods</strong></a>官网看了一下, 原来是少添加了一个指定的<strong><code>target</code></strong>, 这个<strong><code>target</code></strong>是在哪里获取呢? 下面看图~~</p>
</blockquote>

<p><img src="media/14718487794778/12.png" alt="12"/></p>

<p><img src="media/14718487794778/13.png" alt="13"/></p>

<blockquote>
<p>然后我们再次打开<strong><code>Podfile</code></strong>, 编辑它, 保存, 再次<strong><code>install</code></strong></p>
</blockquote>

<pre><code class="language-vim">target &#39;CollectionViewDemo&#39; do
   pod &#39;HTHorizontalSelectionList&#39;, &#39;~&gt; 0.7.0&#39;
end
</code></pre>

<p><img src="media/14718487794778/14.png" alt="14"/></p>

<p><img src="media/14718487794778/15.png" alt="15"/></p>

<blockquote>
<p>OK, 成功了, 我们会看到工程里多了一些文件, 而我们再也不会运行<strong><code>.xcodeproj</code></strong>工程文件, 而是运行<strong><code>.xcworkspace</code></strong></p>
</blockquote>

<p><img src="media/14718487794778/16.png" alt="16"/></p>

<p><img src="media/14718487794778/17.png" alt="17"/></p>

<blockquote>
<p>关于怎么去使用第三方的库这里我就不需要再去说了, 大家都懂的</p>
</blockquote>

<hr/>

<h3 id="toc_7">升级CocoaPods</h3>

<blockquote>
<p>先更新gem<br/><br/>
<code>vim<br/>
sudo gem update —system<br/>
</code><br/>
删除rubygems源<br/>
<code>vim<br/>
gem sources --remove https://rubygems.org/<br/>
</code><br/>
添加ruby淘宝源<br/>
<code>vim<br/>
gem sources -a https://ruby.taobao.org/<br/>
</code><br/>
测试源是否正确, 和刚开始安装时一样<br/>
<code>vim<br/>
gem sources -l<br/>
</code><br/>
安装CocoaPods<br/>
<code>vim<br/>
sudo gem install cocoa pods<br/>
pod setup<br/>
</code><br/>
查看CocoaPods版本<br/>
<code>vim<br/>
pod --version<br/>
</code></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转iOS开发：界面调试工具《Reveal》]]></title>
    <link href="http://Cain.developer.io/14718465693146.html"/>
    <updated>2016-08-22T14:16:09+08:00</updated>
    <id>http://Cain.developer.io/14718465693146.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">作者感言</h3>

<blockquote>
<p>这次的<strong><code>Reveal</code></strong>研究，让我发现调试UI再也不像会以前那么的困难, 更加不会那么的蛋疼, 不需要每次都在脑海里想象出那个画面, 自从使用了<strong><code>Reveal</code></strong>之后, 麻麻再也不用担心我调界面难过了~</p>

<p>最后:<br/>
如果你有更好的建议或者对这篇文章有不满的地方, 请联系我, 我会参考你们的意见再进行修改, 联系我时, 请备注<strong><code>Reveal</code></strong> 如果觉得好的话, 希望大家也可以打赏一下~嘻嘻~祝大家学习愉快~谢谢~</p>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<h3 id="toc_1">疑问</h3>

<blockquote>
<p>有童鞋可能会问, <strong><code>Xcode</code></strong>不是自带了有<a href="https://developer.apple.com/library/ios/recipes/xcode_help-debugger/using_view_debugger/using_view_debugger.html">Debug View Hierarchy in Xcode</a>么, 为啥还要用第三方的Reveal, 答案就是:<q>因为苹果所提供的<strong><code>Debug View Hierarchy in Xcode</code></strong>弱爆了, 只能看看, 啥都不能操作, 而且还容易造成<strong><code>Xcode</code></strong>的卡顿, 比如一些电脑比较低配的, 卡死, 然后<strong><code>Xcode</code></strong>就一闪而过, 直接就<strong><code>Crash</code></strong>了.</q></p>

<p><a href="http://revealapp.com">Reveal</a>就不会出现这个问题, Reveal是一款图形调试工具, 支持iOS全设备的UI调试, 支持模拟器以及真机调试, 同时也支持实时UI效果的展示.</p>
</blockquote>

<hr/>

<h3 id="toc_2">添加Debug命令</h3>

<blockquote>
<p>打开<strong><code>Terminal</code></strong>, 输入命令</p>
</blockquote>

<pre><code class="language-vim">vim ~/.lldbinit 
</code></pre>

<p><img src="media/14718456835492/0.png" alt="0"/></p>

<blockquote>
<p>添加命令<br/>
<code>vim<br/>
command alias reveal_load_sim expr (void*)dlopen(&quot;/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib&quot;, 0x2);  <br/>
command alias reveal_load_dev expr (void*)dlopen([(NSString*)[(NSBundle*)[NSBundle mainBundle] pathForResource:@&quot;libReveal&quot; ofType:@&quot;dylib&quot;] cStringUsingEncoding:0x4], 0x2);  <br/>
command alias reveal_start expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@&quot;IBARevealRequestStart&quot; object:nil];  <br/>
command alias reveal_stop expr (void)[(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@&quot;IBARevealRequestStop&quot; object: nil nil]; <br/>
</code></p>
</blockquote>

<p><img src="media/14718456835492/1.png" alt="1"/></p>

<p>这里解释一下命令的意思</p>

<blockquote>
<p><strong><code>reveal_load_sim</code></strong> 为模拟器加载reveal调试用的动态链接库<br/>
<strong><code>reveal_load_dev</code></strong> 为真机加载<br/>
<strong><code>reveal_start</code></strong>       启动reveal调试功能<br/>
<strong><code>reveal_stop</code></strong>         结束reveal调试功能</p>
</blockquote>

<hr/>

<h3 id="toc_3">在Xcode中启动Reveal</h3>

<blockquote>
<p>首先打开<strong><code>Xcode</code></strong>的工程, 去到<strong><code>AppDelegate</code></strong></p>
</blockquote>

<p><img src="media/14718456835492/2.png" alt="2"/></p>

<blockquote>
<p>然后在<strong><code>application:didFinishLaunchingWithOptions</code></strong>方法中添加断点</p>
</blockquote>

<p><img src="media/14718456835492/3.png" alt="3"/></p>

<blockquote>
<p>编辑断点, 添加对应的代码<br/>
<img src="media/14718456835492/4.png" alt="4"/></p>
</blockquote>

<p><img src="media/14718456835492/5.png" alt="5"/></p>

<blockquote>
<p>运行工程, 如果看到控制台里输出以下酱紫的一行字, 就代表设置成功了</p>
</blockquote>

<p><img src="media/14718456835492/6.png" alt="6"/></p>

<hr/>

<h3 id="toc_4">查看Reveal效果</h3>

<blockquote>
<p>看完上面的操作步骤, 只要你设置的都是正确的, 那就可以打开<strong><code>Reveal</code></strong>查看效果了</p>
</blockquote>

<p><img src="media/14718456835492/7.png" alt="7"/></p>

<blockquote>
<p>如果你的模拟器切换了页面, <strong><code>Reveal</code></strong>是不会自动刷新的, 既然是酱紫, 那我们就需要做对应的操作</p>
</blockquote>

<p><img src="media/14718456835492/8.png" alt="8"/></p>

<p><img src="media/14718456835492/9.png" alt="9"/></p>

<p><img src="media/14718456835492/10.png" alt="10"/></p>

<hr/>

<h3 id="toc_5">特殊教程(无限试用)</h3>

<blockquote>
<p>打开你的<strong><code>Terminal</code></strong>, 然后输入以下命令</p>
</blockquote>

<p><img src="media/14718456835492/11.png" alt="11"/></p>

<blockquote>
<p>找到<strong><code>com.ittybittyapps.Reveal.plist</code></strong>文件删掉</p>

<p>PS: 这个文件每次运行的时候<strong><code>Reveal</code></strong>都会创建一次, 每次都是从第一天开始, 每次<strong><code>Reveal</code></strong>还有几天的时候, 再删掉, 就会再次从第一天开始.</p>
</blockquote>

<p><img src="media/14718456835492/12.png" alt="12"/></p>

<blockquote>
<p><strong><font color=red>这里声明一点, 作者是希望大家都去购买正版, 而不是去寻找什么破解方法, 毕竟我们本身就是做软件的, 所以希望大家可以去支持支持正版.</font></strong></p>
</blockquote>

<hr/>

<h3 id="toc_6">附件</h3>

<blockquote>
<p>由于真机调试是需要修改<strong><code>Xcode</code></strong>工程配置, 不太适合团队协作, 所以这里我只提供了模拟器UI调试的方法, 如果有朋友需要真机调试, 这里有一个<a href="http://support.revealapp.com/kb/getting-started/integrating-reveal-add-reveal-to-your-xcode-project">官方教程</a>, 有兴趣的童鞋可以自行去查看</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
